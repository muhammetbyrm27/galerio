import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { jwtDecode } from 'jwt-decode'; // EKLE
import { socket } from './socket'; // EKLE
import './UserConversationsModal.css'; // Bu CSS dosyasÄ±na da ekleme yapacaÄŸÄ±z

function UserConversationsModal({ closeModal, openChatForVehicle }) {
    const [conversations, setConversations] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) return;

        try {
            const decodedUser = jwtDecode(token);

            // Socket baÄŸlantÄ±sÄ±nÄ± saÄŸla
            if (!socket.connected) {
                socket.connect();
            }

            // TÃ¼m bildirimleri temizle (conversationId olmadan)
            socket.emit('user_cleared_notifications', {
                userId: decodedUser.id
                // conversationId yok - tÃ¼mÃ¼ temizlenecek
            });

            console.log('ðŸ“­ UserConversationsModal: TÃ¼m bildirimler temizlendi');

        } catch (error) {
            console.error("Token decode hatasÄ±:", error);
        }
    }, []);
    const fetchUserConversations = useCallback(async () => {
        setIsLoading(true);
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                closeModal();
                return;
            }
            const response = await axios.get('http://localhost:5000/api/user-conversations', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            setConversations(response.data);
            setError('');
        } catch (err) {
            console.error("KullanÄ±cÄ± konuÅŸmalarÄ± alÄ±namadÄ±:", err);
            setError(err.response?.data?.message || 'KonuÅŸmalar yÃ¼klenirken bir hata oluÅŸtu.');
        } finally {
            setIsLoading(false);
        }
    }, [closeModal]);

    useEffect(() => {
        fetchUserConversations();
    }, [fetchUserConversations]);

    const handleConversationClick = (vehicleId, conversationId) => {
        if (!vehicleId) {
            alert("Bu sohbete ait araÃ§ bilgisi bulunamadÄ±.");
            return;
        }

        // *** YENÄ° EKLEME: Spesifik konuÅŸma aÃ§Ä±lÄ±rken o konuÅŸmanÄ±n bildirimlerini temizle ***
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decodedUser = jwtDecode(token);
                socket.emit('user_cleared_notifications', {
                    userId: decodedUser.id,
                    conversationId: conversationId
                });
            } catch (error) {
                console.error("Token decode hatasÄ±:", error);
            }
        }

        openChatForVehicle(vehicleId);
    };

    // ===> YENÄ° FONKSÄ°YON: Sohbeti silmek iÃ§in eklendi <===

    
    return (
        <div className="modal-overlay" onClick={closeModal}>
            <div className="modal-content user-conversations-modal" onClick={(e) => e.stopPropagation()}>
                <header className="modal-header-user">
                    <h2>Gelen Kutusu</h2>
                    <button className="modal-close-btn" onClick={closeModal}>Ã—</button>
                </header>
                <main className="modal-body-user">
                    {isLoading ? (
                        <p>KonuÅŸmalar yÃ¼kleniyor...</p>
                    ) : error ? (
                        <p className="error-text">{error}</p>
                    ) : conversations.length === 0 ? (
                        <div className="no-conversations-info">
                            <p>HenÃ¼z bir mesajlaÅŸmanÄ±z yok.</p>
                            <span>Ä°lan detay sayfalarÄ±ndan satÄ±cÄ±ya mesaj gÃ¶nderebilirsiniz.</span>
                        </div>
                    ) : (
                        <div className="conversations-list-container">
                            {conversations.map(convo => (
                                <div 
                                    key={convo.conversation_id} 
                                    className="conversation-summary-item" 
                                    // ===> GÃœNCELLEME: Sil butonu dÄ±ÅŸÄ±ndaki alana tÄ±klanmasÄ±nÄ± saÄŸlÄ±yoruz
                                    onClick={() => handleConversationClick(convo.vehicle_id, convo.conversation_id)}
                                >
                                    <div className="conversation-text">
                                        <span className="convo-vehicle-title">{convo.brand} {convo.model}</span>
                                        <p className="convo-last-message">"{convo.message}"</p>
                                    </div>
                                    <div className="conversation-meta">
                                        <span className="convo-timestamp">
                                            {new Date(convo.created_at).toLocaleString('tr-TR', { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' })}
                                        </span>
                                        {convo.unread_count > 0 && (
                                            <span className="convo-unread-badge" title={`${convo.unread_count} yeni mesaj`}>
                                                {convo.unread_count}
                                            </span>
                                        )}
                                    </div>
                                    {/* ===> YENÄ° BUTON: Silme butonu eklendi <=== */}

                                </div>
                            ))}
                        </div>
                    )}
                </main>
            </div>
        </div>
    );
}

export default UserConversationsModal;
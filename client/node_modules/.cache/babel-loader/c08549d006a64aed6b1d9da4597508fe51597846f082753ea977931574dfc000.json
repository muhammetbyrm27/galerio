{"ast":null,"code":"// // import React, { useState, useEffect, useRef } from 'react';\n// // import io from 'socket.io-client';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './AdminChatBox.css';\n\n// // const socket = io('http://localhost:5000');\n\n// // function AdminChatBox({ conversationId }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [adminUser, setAdminUser] = useState(null);\n// //   const [conversationInfo, setConversationInfo] = useState({});\n// //   const messagesEndRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       try {\n// //         const decoded = jwtDecode(token);\n// //         setAdminUser(decoded);\n// //       } catch (error) {\n// //         console.error(\"Admin token decode error:\", error);\n// //       }\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     // Sadece conversationId değiştiğinde çalış\n// //     if (conversationId && adminUser) {\n// //       const parts = conversationId.split('-');\n// //       const userIdPart = parts.find(p => p.startsWith('user_'));\n// //       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\n\n// //       const userId = userIdPart ? userIdPart.split('_')[1] : null;\n// //       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\n// //       setConversationInfo({ userId, vehicleId });\n\n// //       socket.emit('join_room', conversationId);\n\n// //       const handleLoadMessages = (loadedMessages) => {\n// //         setMessages(loadedMessages);\n// //       };\n\n// //       const handleReceiveMessage = (message) => {\n// //         // Sadece mevcut sohbetimize aitse mesajı ekle\n// //         if (message.conversation_id === conversationId) {\n// //             setMessages((prev) => [...prev, message]);\n// //         }\n// //       };\n\n// //       socket.on('load_messages', handleLoadMessages);\n// //       socket.on('receive_message', handleReceiveMessage);\n\n// //       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\n// //       return () => {\n// //         socket.off('load_messages', handleLoadMessages);\n// //         socket.off('receive_message', handleReceiveMessage);\n// //         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\n// //         // socket.emit('leave_room', conversationId);\n// //       };\n// //     }\n// //   }, [conversationId, adminUser]);\n\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\n\n// //     const messageData = {\n// //       conversation_id: conversationId,\n// //       sender_id: adminUser.id,\n// //       receiver_id: parseInt(conversationInfo.userId),\n// //       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\n// //       message: newMessage.trim(),\n// //     };\n\n// //     socket.emit('send_message', messageData);\n// //     setNewMessage('');\n// //   };\n\n// //   if (!conversationId) {\n// //     return (\n// //       <div className=\"admin-chat-box-empty\">\n// //         <p>Görüntülemek için bir konuşma seçin.</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"admin-chat-box\">\n// //       <div className=\"chat-messages-admin\">\n// //         {messages.map((msg, index) => {\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n// //           return (\n// //             <div\n// //               key={msg.id || index}\n// //               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\n// //             >\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n// //                 <p>{msg.message}</p>\n// //                 <span className=\"message-time\">\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n// //                 </span>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //         <div ref={messagesEndRef} />\n// //       </div>\n\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //         <input\n// //           type=\"text\"\n// //           value={newMessage}\n// //           onChange={(e) => setNewMessage(e.target.value)}\n// //           placeholder=\"Cevabınızı yazın...\"\n// //         />\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>\n// //           ➢\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminChatBox;\n// import React, { useState, useEffect, useRef } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import axios from 'axios'; // <-- Gerekli import eklendi\n// import './AdminChatBox.css';\n// import { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\n\n// function AdminChatBox({ conversationId }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [adminUser, setAdminUser] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try {\n//         setAdminUser(jwtDecode(token));\n//       } catch (error) {\n//         console.error(\"Admin token decode error:\", error);\n//       }\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!conversationId || !adminUser) return;\n\n//     // Bağlantıyı manuel olarak başlat\n//     socket.connect();\n\n//     function onConnect() {\n//         console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\n//         socket.emit('join_room', conversationId);\n//     }\n\n//     function handleLoadMessages(loadedMessages) {\n//       setMessages(loadedMessages);\n//     }\n\n//     function handleReceiveMessage(message) {\n//       if (message.conversation_id === conversationId) {\n//         setMessages((prev) => [...prev, message]);\n//       }\n//     }\n\n//     // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\n//     function handleMessageDeleted({ messageId }) {\n//         setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\n//     }\n\n//     // Listener'ları ekle\n//     socket.on('connect', onConnect);\n//     socket.on('load_messages', handleLoadMessages);\n//     socket.on('receive_message', handleReceiveMessage);\n//     socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\n\n//     // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\n//     if (socket.connected) {\n//         onConnect();\n//     }\n\n//     // Component'tan çıkıldığında temizlik yap\n//     return () => {\n//       socket.off('connect', onConnect);\n//       socket.off('load_messages', handleLoadMessages);\n//       socket.off('receive_message', handleReceiveMessage);\n//       socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\n//     };\n//   }, [conversationId, adminUser]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     const trimmedMessage = newMessage.trim();\n//     if (trimmedMessage === '' || !adminUser) return;\n\n//     // conversationId'den alıcı ve araç ID'sini çıkar\n//     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\n//     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\n//     if (!userIdPart) return;\n\n//     const receiver_id = parseInt(userIdPart.split('_')[1]);\n//     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: adminUser.id,\n//       receiver_id,\n//       vehicle_id,\n//       message: trimmedMessage,\n//     };\n\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   // === YENİ: MESAJ SİLME FONKSİYONU ===\n//   const handleDeleteMessage = async (messageId) => {\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n//         try {\n//             const token = localStorage.getItem('token');\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n//                 headers: { 'Authorization': `Bearer ${token}` }\n//             });\n//             // Arayüzden anında kaldırma işlemi artık backend'den gelen \n//             // 'message_deleted' socket olayı ile yapılıyor.\n//         } catch (error) {\n//             console.error(\"Mesaj silinemedi:\", error);\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n//         }\n//     }\n//   };\n\n//   if (!conversationId) {\n//     return (\n//       <div className=\"admin-chat-box-empty\">\n//         <p>Görüntülemek için bir konuşma seçin.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"admin-chat-box\">\n//       <div className=\"chat-messages-admin\">\n//         {messages.map((msg) => {\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n//           return (\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n//                 {/* === YENİ: SİLME BUTONU === \n//                     Admin her mesajı (hem kendi hem kullanıcı) silebilir */}\n//                 <button \n//                     className=\"delete-message-btn\" \n//                     onClick={() => handleDeleteMessage(msg.id)}\n//                     title=\"Mesajı Sil\"\n//                 >\n//                     ×\n//                 </button>\n//                 <p>{msg.message}</p>\n//                 <span className=\"message-time\">\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n//                 </span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//         <div ref={messagesEndRef} />\n//       </div>\n\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Cevabınızı yazın...\"\n//         />\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\n//           ➢\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default AdminChatBox;","map":{"version":3,"names":[],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminChatBox.js"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import './AdminChatBox.css';\r\n\r\n// // const socket = io('http://localhost:5000');\r\n\r\n// // function AdminChatBox({ conversationId }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [adminUser, setAdminUser] = useState(null);\r\n// //   const [conversationInfo, setConversationInfo] = useState({});\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       try {\r\n// //         const decoded = jwtDecode(token);\r\n// //         setAdminUser(decoded);\r\n// //       } catch (error) {\r\n// //         console.error(\"Admin token decode error:\", error);\r\n// //       }\r\n// //     }\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     // Sadece conversationId değiştiğinde çalış\r\n// //     if (conversationId && adminUser) {\r\n// //       const parts = conversationId.split('-');\r\n// //       const userIdPart = parts.find(p => p.startsWith('user_'));\r\n// //       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\r\n      \r\n// //       const userId = userIdPart ? userIdPart.split('_')[1] : null;\r\n// //       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\r\n// //       setConversationInfo({ userId, vehicleId });\r\n\r\n// //       socket.emit('join_room', conversationId);\r\n\r\n// //       const handleLoadMessages = (loadedMessages) => {\r\n// //         setMessages(loadedMessages);\r\n// //       };\r\n\r\n// //       const handleReceiveMessage = (message) => {\r\n// //         // Sadece mevcut sohbetimize aitse mesajı ekle\r\n// //         if (message.conversation_id === conversationId) {\r\n// //             setMessages((prev) => [...prev, message]);\r\n// //         }\r\n// //       };\r\n\r\n// //       socket.on('load_messages', handleLoadMessages);\r\n// //       socket.on('receive_message', handleReceiveMessage);\r\n\r\n// //       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\r\n// //       return () => {\r\n// //         socket.off('load_messages', handleLoadMessages);\r\n// //         socket.off('receive_message', handleReceiveMessage);\r\n// //         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\r\n// //         // socket.emit('leave_room', conversationId);\r\n// //       };\r\n// //     }\r\n// //   }, [conversationId, adminUser]);\r\n\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\r\n    \r\n// //     const messageData = {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: adminUser.id,\r\n// //       receiver_id: parseInt(conversationInfo.userId),\r\n// //       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\r\n// //       message: newMessage.trim(),\r\n// //     };\r\n\r\n// //     socket.emit('send_message', messageData);\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   if (!conversationId) {\r\n// //     return (\r\n// //       <div className=\"admin-chat-box-empty\">\r\n// //         <p>Görüntülemek için bir konuşma seçin.</p>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"admin-chat-box\">\r\n// //       <div className=\"chat-messages-admin\">\r\n// //         {messages.map((msg, index) => {\r\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n// //           return (\r\n// //             <div\r\n// //               key={msg.id || index}\r\n// //               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\r\n// //             >\r\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n// //                 <p>{msg.message}</p>\r\n// //                 <span className=\"message-time\">\r\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n// //                 </span>\r\n// //               </div>\r\n// //             </div>\r\n// //           );\r\n// //         })}\r\n// //         <div ref={messagesEndRef} />\r\n// //       </div>\r\n      \r\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={newMessage}\r\n// //           onChange={(e) => setNewMessage(e.target.value)}\r\n// //           placeholder=\"Cevabınızı yazın...\"\r\n// //         />\r\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>\r\n// //           ➢\r\n// //         </button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminChatBox;\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import axios from 'axios'; // <-- Gerekli import eklendi\r\n// import './AdminChatBox.css';\r\n// import { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\r\n\r\n// function AdminChatBox({ conversationId }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [adminUser, setAdminUser] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try {\r\n//         setAdminUser(jwtDecode(token));\r\n//       } catch (error) {\r\n//         console.error(\"Admin token decode error:\", error);\r\n//       }\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!conversationId || !adminUser) return;\r\n    \r\n//     // Bağlantıyı manuel olarak başlat\r\n//     socket.connect();\r\n\r\n//     function onConnect() {\r\n//         console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\r\n//         socket.emit('join_room', conversationId);\r\n//     }\r\n    \r\n//     function handleLoadMessages(loadedMessages) {\r\n//       setMessages(loadedMessages);\r\n//     }\r\n\r\n//     function handleReceiveMessage(message) {\r\n//       if (message.conversation_id === conversationId) {\r\n//         setMessages((prev) => [...prev, message]);\r\n//       }\r\n//     }\r\n    \r\n//     // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\r\n//     function handleMessageDeleted({ messageId }) {\r\n//         setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\r\n//     }\r\n\r\n//     // Listener'ları ekle\r\n//     socket.on('connect', onConnect);\r\n//     socket.on('load_messages', handleLoadMessages);\r\n//     socket.on('receive_message', handleReceiveMessage);\r\n//     socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\r\n\r\n//     // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\r\n//     if (socket.connected) {\r\n//         onConnect();\r\n//     }\r\n\r\n//     // Component'tan çıkıldığında temizlik yap\r\n//     return () => {\r\n//       socket.off('connect', onConnect);\r\n//       socket.off('load_messages', handleLoadMessages);\r\n//       socket.off('receive_message', handleReceiveMessage);\r\n//       socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\r\n//     };\r\n//   }, [conversationId, adminUser]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     const trimmedMessage = newMessage.trim();\r\n//     if (trimmedMessage === '' || !adminUser) return;\r\n    \r\n//     // conversationId'den alıcı ve araç ID'sini çıkar\r\n//     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\r\n//     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\r\n//     if (!userIdPart) return;\r\n\r\n//     const receiver_id = parseInt(userIdPart.split('_')[1]);\r\n//     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\r\n\r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: adminUser.id,\r\n//       receiver_id,\r\n//       vehicle_id,\r\n//       message: trimmedMessage,\r\n//     };\r\n\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   // === YENİ: MESAJ SİLME FONKSİYONU ===\r\n//   const handleDeleteMessage = async (messageId) => {\r\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n//                 headers: { 'Authorization': `Bearer ${token}` }\r\n//             });\r\n//             // Arayüzden anında kaldırma işlemi artık backend'den gelen \r\n//             // 'message_deleted' socket olayı ile yapılıyor.\r\n//         } catch (error) {\r\n//             console.error(\"Mesaj silinemedi:\", error);\r\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   if (!conversationId) {\r\n//     return (\r\n//       <div className=\"admin-chat-box-empty\">\r\n//         <p>Görüntülemek için bir konuşma seçin.</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"admin-chat-box\">\r\n//       <div className=\"chat-messages-admin\">\r\n//         {messages.map((msg) => {\r\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n//           return (\r\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n//                 {/* === YENİ: SİLME BUTONU === \r\n//                     Admin her mesajı (hem kendi hem kullanıcı) silebilir */}\r\n//                 <button \r\n//                     className=\"delete-message-btn\" \r\n//                     onClick={() => handleDeleteMessage(msg.id)}\r\n//                     title=\"Mesajı Sil\"\r\n//                 >\r\n//                     ×\r\n//                 </button>\r\n//                 <p>{msg.message}</p>\r\n//                 <span className=\"message-time\">\r\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n//                 </span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n      \r\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newMessage}\r\n//           onChange={(e) => setNewMessage(e.target.value)}\r\n//           placeholder=\"Cevabınızı yazın...\"\r\n//         />\r\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\r\n//           ➢\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminChatBox;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\AdminChatBox.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { jwtDecode } from 'jwt-decode';\n// // import axios from 'axios';\n// // import './AdminChatBox.css';\n// // import { socket } from './socket';\n\n// // function AdminChatBox({ conversationId }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [adminUser, setAdminUser] = useState(null);\n// //   const messagesEndRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       try {\n// //         setAdminUser(jwtDecode(token));\n// //       } catch (error) { \n// //         console.error(\"Admin token decode error:\", error);\n// //       }\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (!conversationId || !adminUser) {\n// //         setMessages([]); // Sohbet değiştiğinde eski mesajları temizle\n// //         return;\n// //     }\n\n// //     socket.connect();\n\n// //     const onConnect = () => socket.emit('join_room', conversationId);\n// //     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\n// //     const handleReceiveMessage = (message) => {\n// //       if (message.conversation_id === conversationId) {\n// //         setMessages(prev => [...prev, message]);\n// //       }\n// //     };\n// //     const handleMessageDeleted = ({ messageId }) => {\n// //       setMessages(prev => prev.filter(msg => msg.id !== messageId));\n// //     };\n// //     const handleConversationDeleted = () => {\n// //         // Eğer tüm sohbet silinirse, bu sohbet kutusunu temizle\n// //         setMessages([]);\n// //     };\n\n// //     socket.on('connect', onConnect);\n// //     socket.on('load_messages', handleLoadMessages);\n// //     socket.on('receive_message', handleReceiveMessage);\n// //     socket.on('message_deleted', handleMessageDeleted);\n// //     socket.on('conversation_deleted', handleConversationDeleted); // Yeni dinleyici\n\n// //     if (socket.connected) {\n// //         onConnect();\n// //     }\n\n// //     return () => {\n// //       socket.off('connect', onConnect);\n// //       socket.off('load_messages', handleLoadMessages);\n// //       socket.off('receive_message', handleReceiveMessage);\n// //       socket.off('message_deleted', handleMessageDeleted);\n// //       socket.off('conversation_deleted', handleConversationDeleted); // Temizle\n// //     };\n// //   }, [conversationId, adminUser]);\n\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     const trimmedMessage = newMessage.trim();\n// //     if (trimmedMessage === '' || !adminUser) return;\n\n// //     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\n// //     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\n// //     if (!userIdPart) return;\n\n// //     const receiver_id = parseInt(userIdPart.split('_')[1]);\n// //     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\n\n// //     socket.emit('send_message', {\n// //       conversation_id: conversationId,\n// //       sender_id: adminUser.id,\n// //       receiver_id,\n// //       vehicle_id,\n// //       message: trimmedMessage,\n// //     });\n// //     setNewMessage('');\n// //   };\n\n// //   const handleDeleteMessage = async (messageId) => {\n// //     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n// //         try {\n// //             const token = localStorage.getItem('token');\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n// //                 headers: { 'Authorization': `Bearer ${token}` }\n// //             });\n// //         } catch (error) {\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n// //         }\n// //     }\n// //   };\n\n// //   if (!conversationId) {\n// //     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\n// //   }\n\n// //   if (messages.length === 0) {\n// //     return (\n// //          <div className=\"admin-chat-box\">\n// //             <div className=\"chat-messages-admin\">\n// //                  <div ref={messagesEndRef} />\n// //             </div>\n// //              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n// //                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n// //             </form>\n// //         </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"admin-chat-box\">\n// //       <div className=\"chat-messages-admin\">\n// //         {messages.map((msg) => {\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n// //           return (\n// //             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n// //                 <button \n// //                     className=\"delete-message-btn\" \n// //                     onClick={() => handleDeleteMessage(msg.id)}\n// //                     title=\"Mesajı Sil\"\n// //                 >\n// //                     ×\n// //                 </button>\n// //                 <p>{msg.message}</p>\n// //                 <span className=\"message-time\">\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n// //                 </span>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //         <div ref={messagesEndRef} />\n// //       </div>\n\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminChatBox;\n// // Bu kodun tamamını kopyalayıp projenizdeki src/AdminChatBox.js dosyasına yapıştırın.\n\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { jwtDecode } from 'jwt-decode';\n// // import axios from 'axios';\n// // import './AdminChatBox.css';\n// // import { socket } from './socket';\n\n// // function AdminChatBox({ conversationId }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [adminUser, setAdminUser] = useState(null);\n// //   const messagesEndRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       try {\n// //         setAdminUser(jwtDecode(token));\n// //       } catch (error) { \n// //         console.error(\"Admin token decode error:\", error);\n// //       }\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (!conversationId || !adminUser) {\n// //         setMessages([]); // Sohbet değiştiğinde veya kullanıcı bilgisi yoksa eski mesajları temizle\n// //         return;\n// //     }\n\n// //     // Zaten bağlı değilse bağlan\n// //     if (!socket.connected) {\n// //         socket.connect();\n// //     }\n\n// //     const onConnect = () => socket.emit('join_room', conversationId);\n// //     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\n// //     const handleReceiveMessage = (message) => {\n// //       if (message.conversation_id === conversationId) {\n// //         setMessages(prev => [...prev, message]);\n// //       }\n// //     };\n// //     const handleMessageDeleted = ({ messageId }) => {\n// //       setMessages(prev => prev.filter(msg => msg.id !== messageId));\n// //     };\n\n// //     // *** GÜNCELLEME: Bu fonksiyon, bir sohbet silindiğinde tetiklenir ***\n// //     const handleConversationDeleted = (deletedConvId) => {\n// //         // Eğer silinen sohbet, şu an ekranda açık olan sohbet ise mesajları temizle\n// //         if (conversationId === deletedConvId) {\n// //             setMessages([]);\n// //         }\n// //     };\n\n// //     socket.on('connect', onConnect);\n// //     socket.on('load_messages', handleLoadMessages);\n// //     socket.on('receive_message', handleReceiveMessage);\n// //     socket.on('message_deleted', handleMessageDeleted);\n// //     socket.on('conversation_deleted', handleConversationDeleted); // Bu dinleyici, arayüzü güncel tutar\n\n// //     if (socket.connected) {\n// //         onConnect();\n// //     }\n\n// //     // Temizlik fonksiyonu: Component DOM'dan kaldırıldığında çalışır\n// //     return () => {\n// //       socket.off('connect', onConnect);\n// //       socket.off('load_messages', handleLoadMessages);\n// //       socket.off('receive_message', handleReceiveMessage);\n// //       socket.off('message_deleted', handleMessageDeleted);\n// //       socket.off('conversation_deleted', handleConversationDeleted); // Dinleyiciyi kaldır\n// //     };\n// //   }, [conversationId, adminUser]);\n\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     const trimmedMessage = newMessage.trim();\n// //     if (trimmedMessage === '' || !adminUser) return;\n\n// //     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\n// //     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\n// //     if (!userIdPart) return;\n\n// //     const receiver_id = parseInt(userIdPart.split('_')[1]);\n// //     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\n\n// //     socket.emit('send_message', {\n// //       conversation_id: conversationId,\n// //       sender_id: adminUser.id,\n// //       receiver_id,\n// //       vehicle_id,\n// //       message: trimmedMessage,\n// //     });\n// //     setNewMessage('');\n// //   };\n\n// //   const handleDeleteMessage = async (messageId) => {\n// //     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n// //         try {\n// //             const token = localStorage.getItem('token');\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n// //                 headers: { 'Authorization': `Bearer ${token}` }\n// //             });\n// //         } catch (error) {\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n// //         }\n// //     }\n// //   };\n\n// //   if (!conversationId) {\n// //     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\n// //   }\n\n// //   // *** GÜNCELLEME: Mesaj listesi boş olduğunda daha açıklayıcı bir arayüz sunar ***\n// //   if (messages.length === 0) {\n// //     return (\n// //          <div className=\"admin-chat-box\">\n// //             <div className=\"chat-messages-admin\">\n// //                  <div style={{ padding: '20px', textAlign: 'center', color: '#888', fontStyle: 'italic' }}>\n// //                     Bu sohbette henüz mesaj yok veya sohbet silinmiş.\n// //                  </div>\n// //                  <div ref={messagesEndRef} />\n// //             </div>\n// //              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n// //                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n// //             </form>\n// //         </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"admin-chat-box\">\n// //       <div className=\"chat-messages-admin\">\n// //         {messages.map((msg) => {\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n// //           return (\n// //             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n// //                 <button \n// //                     className=\"delete-message-btn\" \n// //                     onClick={() => handleDeleteMessage(msg.id)}\n// //                     title=\"Mesajı Sil\"\n// //                 >\n// //                     ×\n// //                 </button>\n// //                 <p>{msg.message}</p>\n// //                 <span className=\"message-time\">\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n// //                 </span>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //         <div ref={messagesEndRef} />\n// //       </div>\n\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminChatBox;\n// // BU KODUN TAMAMINI KOPYALAYIP MEVCUT AdminChatBox.js DOSYANIZLA DEĞİŞTİRİN\n\n// // AdminChatBox.js (TAM ve EKSİKSİZ KOD)\n\n// // AdminChatBox.js (TAM ve EKSİKSİZ KOD)\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import axios from 'axios';\n// import './AdminChatBox.css';\n// import { socket } from './socket';\n\n// function AdminChatBox({ conversationId }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [adminUser, setAdminUser] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try { setAdminUser(jwtDecode(token)); } catch (error) { console.error(\"Admin token decode error:\", error); }\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!conversationId || !adminUser) return;\n\n//     const token = localStorage.getItem('token');\n//     if (!token) return;\n\n//     if (!socket.connected) socket.connect();\n\n//     const onConnect = () => socket.emit('join_room', { conversationId, token }); \n//     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\n//     const handleReceiveMessage = (message) => {\n//       if (message.conversation_id === conversationId) setMessages(prev => [...prev, message]);\n//     };\n//     const handleMessageDeleted = ({ messageId }) => setMessages(prev => prev.filter(msg => msg.id !== messageId));\n//     const handleConversationDeleted = (deletedConvId) => {\n//         if (conversationId === deletedConvId) setMessages([]);\n//     };\n\n//     socket.on('connect', onConnect);\n//     socket.on('load_messages', handleLoadMessages);\n//     socket.on('receive_message', handleReceiveMessage);\n//     socket.on('message_deleted', handleMessageDeleted);\n//     socket.on('conversation_deleted', handleConversationDeleted);\n\n//     if (socket.connected) onConnect();\n\n//     return () => {\n//       socket.off('connect', onConnect);\n//       socket.off('load_messages', handleLoadMessages);\n//       socket.off('receive_message', handleReceiveMessage);\n//       socket.off('message_deleted', handleMessageDeleted);\n//       socket.off('conversation_deleted', handleConversationDeleted);\n//     };\n//   }, [conversationId, adminUser]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     const trimmedMessage = newMessage.trim();\n//     if (trimmedMessage === '' || !adminUser || !conversationId) return;\n\n//     const userIdMatch = conversationId.match(/user_(\\d+)/);\n//     const vehicleIdMatch = conversationId.match(/vehicle_(\\d+)/);\n\n//     if (!userIdMatch) {\n//       console.error(\"Sohbet kimliğinden kullanıcı ID'si alınamadı:\", conversationId);\n//       return;\n//     }\n\n//     const receiver_id = parseInt(userIdMatch[1]);\n//     const vehicle_id = vehicleIdMatch ? parseInt(vehicleIdMatch[1]) : null;\n\n//     socket.emit('send_message', {\n//       conversation_id: conversationId,\n//       sender_id: adminUser.id,\n//       receiver_id: receiver_id,\n//       vehicle_id: vehicle_id,\n//       message: trimmedMessage,\n//     });\n//     setNewMessage('');\n//   };\n\n//   const handleDeleteMessage = async (messageId) => {\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n//         try {\n//             const token = localStorage.getItem('token');\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n//                 headers: { 'Authorization': `Bearer ${token}` }\n//             });\n//         } catch (error) {\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n//         }\n//     }\n//   };\n\n//   if (!conversationId) {\n//     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\n//   }\n\n//   if (messages.length === 0) {\n//     return (\n//          <div className=\"admin-chat-box\">\n//             <div className=\"chat-messages-admin\">\n//                  <div style={{ padding: '20px', textAlign: 'center', color: '#888', fontStyle: 'italic' }}>\n//                     Bu sohbette henüz mesaj yok veya sohbet silinmiş.\n//                  </div>\n//                  <div ref={messagesEndRef} />\n//             </div>\n//              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n//                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n//             </form>\n//         </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"admin-chat-box\">\n//       <div className=\"chat-messages-admin\">\n//         {messages.map((msg) => {\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n//           return (\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n//                 <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\n//                 <p>{msg.message}</p>\n//                 <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//         <div ref={messagesEndRef} />\n//       </div>\n\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\n//         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default AdminChatBox;\n\n// AdminChatBox.js (TAM ve EKSİKSİZ KOD)\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport './AdminChatBox.css';\nimport { socket } from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminChatBox({\n  conversationId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [adminUser, setAdminUser] = useState(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        setAdminUser(jwtDecode(token));\n      } catch (error) {\n        console.error(\"Admin token decode error:\", error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (!conversationId || !adminUser) return;\n\n    // *** GÜNCELLEME: socket.connect() buradan kaldırıldı! ***\n\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    const onConnect = () => socket.emit('join_room', {\n      conversationId,\n      token\n    });\n    const handleLoadMessages = loadedMessages => setMessages(loadedMessages);\n    const handleReceiveMessage = message => {\n      if (message.conversation_id === conversationId) setMessages(prev => [...prev, message]);\n    };\n    const handleMessageDeleted = ({\n      messageId\n    }) => setMessages(prev => prev.filter(msg => msg.id !== messageId));\n    const handleConversationDeleted = deletedConvId => {\n      if (conversationId === deletedConvId) setMessages([]);\n    };\n    if (socket.connected) onConnect();\n    socket.on('connect', onConnect);\n    socket.on('load_messages', handleLoadMessages);\n    socket.on('receive_message', handleReceiveMessage);\n    socket.on('message_deleted', handleMessageDeleted);\n    socket.on('conversation_deleted', handleConversationDeleted);\n    return () => {\n      socket.off('connect', onConnect);\n      socket.off('load_messages', handleLoadMessages);\n      socket.off('receive_message', handleReceiveMessage);\n      socket.off('message_deleted', handleMessageDeleted);\n      socket.off('conversation_deleted', handleConversationDeleted);\n    };\n  }, [conversationId, adminUser]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const trimmedMessage = newMessage.trim();\n    if (trimmedMessage === '' || !adminUser || !conversationId) return;\n    const userIdMatch = conversationId.match(/user_(\\d+)/);\n    const vehicleIdMatch = conversationId.match(/vehicle_(\\d+)/);\n    if (!userIdMatch) {\n      console.error(\"Sohbet kimliğinden kullanıcı ID'si alınamadı:\", conversationId);\n      return;\n    }\n    const receiver_id = parseInt(userIdMatch[1]);\n    const vehicle_id = vehicleIdMatch ? parseInt(vehicleIdMatch[1]) : null;\n    socket.emit('send_message', {\n      conversation_id: conversationId,\n      sender_id: adminUser.id,\n      receiver_id: receiver_id,\n      vehicle_id: vehicle_id,\n      message: trimmedMessage\n    });\n    setNewMessage('');\n  };\n  const handleDeleteMessage = async messageId => {\n    if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        var _error$response, _error$response$data;\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Mesaj silinirken bir hata oluştu.\");\n      }\n    }\n  };\n  if (!conversationId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-chat-box-empty\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\\xF6r\\xFCnt\\xFClemek i\\xE7in bir konu\\u015Fma se\\xE7in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 12\n    }, this);\n  }\n  if (messages.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-admin\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '20px',\n            textAlign: 'center',\n            color: '#888',\n            fontStyle: 'italic'\n          },\n          children: \"Bu sohbette hen\\xFCz mesaj yok veya sohbet silinmi\\u015F.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-input-form-admin\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Cevab\\u0131n\\u0131z\\u0131 yaz\\u0131n...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !newMessage.trim(),\n          children: \"\\u27A2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 10\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages-admin\",\n      children: [messages.map(msg => {\n        const isAdminMessage = parseInt(msg.sender_id) === (adminUser === null || adminUser === void 0 ? void 0 : adminUser.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-message-btn\",\n              onClick: () => handleDeleteMessage(msg.id),\n              title: \"Mesaj\\u0131 Sil\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: new Date(msg.created_at).toLocaleTimeString('tr-TR', {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 15\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input-form-admin\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Cevab\\u0131n\\u0131z\\u0131 yaz\\u0131n...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !newMessage.trim(),\n        children: \"\\u27A2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 609,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminChatBox, \"3gAwUB0tjPPd2I8/jUDeerMNEgU=\");\n_c = AdminChatBox;\nexport default AdminChatBox;\nvar _c;\n$RefreshReg$(_c, \"AdminChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jwtDecode","axios","socket","jsxDEV","_jsxDEV","AdminChatBox","conversationId","_s","messages","setMessages","newMessage","setNewMessage","adminUser","setAdminUser","messagesEndRef","token","localStorage","getItem","error","console","onConnect","emit","handleLoadMessages","loadedMessages","handleReceiveMessage","message","conversation_id","prev","handleMessageDeleted","messageId","filter","msg","id","handleConversationDeleted","deletedConvId","connected","on","off","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trimmedMessage","trim","userIdMatch","match","vehicleIdMatch","receiver_id","parseInt","vehicle_id","sender_id","handleDeleteMessage","window","confirm","delete","headers","_error$response","_error$response$data","alert","response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","style","padding","textAlign","color","fontStyle","ref","onSubmit","type","value","onChange","target","placeholder","disabled","map","isAdminMessage","onClick","title","Date","created_at","toLocaleTimeString","hour","minute","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminChatBox.js"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import axios from 'axios';\r\n// // import './AdminChatBox.css';\r\n// // import { socket } from './socket';\r\n\r\n// // function AdminChatBox({ conversationId }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [adminUser, setAdminUser] = useState(null);\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       try {\r\n// //         setAdminUser(jwtDecode(token));\r\n// //       } catch (error) { \r\n// //         console.error(\"Admin token decode error:\", error);\r\n// //       }\r\n// //     }\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     if (!conversationId || !adminUser) {\r\n// //         setMessages([]); // Sohbet değiştiğinde eski mesajları temizle\r\n// //         return;\r\n// //     }\r\n    \r\n// //     socket.connect();\r\n\r\n// //     const onConnect = () => socket.emit('join_room', conversationId);\r\n// //     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\r\n// //     const handleReceiveMessage = (message) => {\r\n// //       if (message.conversation_id === conversationId) {\r\n// //         setMessages(prev => [...prev, message]);\r\n// //       }\r\n// //     };\r\n// //     const handleMessageDeleted = ({ messageId }) => {\r\n// //       setMessages(prev => prev.filter(msg => msg.id !== messageId));\r\n// //     };\r\n// //     const handleConversationDeleted = () => {\r\n// //         // Eğer tüm sohbet silinirse, bu sohbet kutusunu temizle\r\n// //         setMessages([]);\r\n// //     };\r\n\r\n// //     socket.on('connect', onConnect);\r\n// //     socket.on('load_messages', handleLoadMessages);\r\n// //     socket.on('receive_message', handleReceiveMessage);\r\n// //     socket.on('message_deleted', handleMessageDeleted);\r\n// //     socket.on('conversation_deleted', handleConversationDeleted); // Yeni dinleyici\r\n\r\n// //     if (socket.connected) {\r\n// //         onConnect();\r\n// //     }\r\n\r\n// //     return () => {\r\n// //       socket.off('connect', onConnect);\r\n// //       socket.off('load_messages', handleLoadMessages);\r\n// //       socket.off('receive_message', handleReceiveMessage);\r\n// //       socket.off('message_deleted', handleMessageDeleted);\r\n// //       socket.off('conversation_deleted', handleConversationDeleted); // Temizle\r\n// //     };\r\n// //   }, [conversationId, adminUser]);\r\n\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     const trimmedMessage = newMessage.trim();\r\n// //     if (trimmedMessage === '' || !adminUser) return;\r\n    \r\n// //     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\r\n// //     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\r\n// //     if (!userIdPart) return;\r\n\r\n// //     const receiver_id = parseInt(userIdPart.split('_')[1]);\r\n// //     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\r\n\r\n// //     socket.emit('send_message', {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: adminUser.id,\r\n// //       receiver_id,\r\n// //       vehicle_id,\r\n// //       message: trimmedMessage,\r\n// //     });\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   const handleDeleteMessage = async (messageId) => {\r\n// //     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n// //         try {\r\n// //             const token = localStorage.getItem('token');\r\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n// //                 headers: { 'Authorization': `Bearer ${token}` }\r\n// //             });\r\n// //         } catch (error) {\r\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n// //         }\r\n// //     }\r\n// //   };\r\n\r\n// //   if (!conversationId) {\r\n// //     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\r\n// //   }\r\n  \r\n\r\n// //   if (messages.length === 0) {\r\n// //     return (\r\n// //          <div className=\"admin-chat-box\">\r\n// //             <div className=\"chat-messages-admin\">\r\n// //                  <div ref={messagesEndRef} />\r\n// //             </div>\r\n// //              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n// //                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n// //             </form>\r\n// //         </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"admin-chat-box\">\r\n// //       <div className=\"chat-messages-admin\">\r\n// //         {messages.map((msg) => {\r\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n// //           return (\r\n// //             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n// //                 <button \r\n// //                     className=\"delete-message-btn\" \r\n// //                     onClick={() => handleDeleteMessage(msg.id)}\r\n// //                     title=\"Mesajı Sil\"\r\n// //                 >\r\n// //                     ×\r\n// //                 </button>\r\n// //                 <p>{msg.message}</p>\r\n// //                 <span className=\"message-time\">\r\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n// //                 </span>\r\n// //               </div>\r\n// //             </div>\r\n// //           );\r\n// //         })}\r\n// //         <div ref={messagesEndRef} />\r\n// //       </div>\r\n      \r\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminChatBox;\r\n// // Bu kodun tamamını kopyalayıp projenizdeki src/AdminChatBox.js dosyasına yapıştırın.\r\n\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import axios from 'axios';\r\n// // import './AdminChatBox.css';\r\n// // import { socket } from './socket';\r\n\r\n// // function AdminChatBox({ conversationId }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [adminUser, setAdminUser] = useState(null);\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       try {\r\n// //         setAdminUser(jwtDecode(token));\r\n// //       } catch (error) { \r\n// //         console.error(\"Admin token decode error:\", error);\r\n// //       }\r\n// //     }\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     if (!conversationId || !adminUser) {\r\n// //         setMessages([]); // Sohbet değiştiğinde veya kullanıcı bilgisi yoksa eski mesajları temizle\r\n// //         return;\r\n// //     }\r\n    \r\n// //     // Zaten bağlı değilse bağlan\r\n// //     if (!socket.connected) {\r\n// //         socket.connect();\r\n// //     }\r\n\r\n// //     const onConnect = () => socket.emit('join_room', conversationId);\r\n// //     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\r\n// //     const handleReceiveMessage = (message) => {\r\n// //       if (message.conversation_id === conversationId) {\r\n// //         setMessages(prev => [...prev, message]);\r\n// //       }\r\n// //     };\r\n// //     const handleMessageDeleted = ({ messageId }) => {\r\n// //       setMessages(prev => prev.filter(msg => msg.id !== messageId));\r\n// //     };\r\n\r\n// //     // *** GÜNCELLEME: Bu fonksiyon, bir sohbet silindiğinde tetiklenir ***\r\n// //     const handleConversationDeleted = (deletedConvId) => {\r\n// //         // Eğer silinen sohbet, şu an ekranda açık olan sohbet ise mesajları temizle\r\n// //         if (conversationId === deletedConvId) {\r\n// //             setMessages([]);\r\n// //         }\r\n// //     };\r\n\r\n// //     socket.on('connect', onConnect);\r\n// //     socket.on('load_messages', handleLoadMessages);\r\n// //     socket.on('receive_message', handleReceiveMessage);\r\n// //     socket.on('message_deleted', handleMessageDeleted);\r\n// //     socket.on('conversation_deleted', handleConversationDeleted); // Bu dinleyici, arayüzü güncel tutar\r\n\r\n// //     if (socket.connected) {\r\n// //         onConnect();\r\n// //     }\r\n\r\n// //     // Temizlik fonksiyonu: Component DOM'dan kaldırıldığında çalışır\r\n// //     return () => {\r\n// //       socket.off('connect', onConnect);\r\n// //       socket.off('load_messages', handleLoadMessages);\r\n// //       socket.off('receive_message', handleReceiveMessage);\r\n// //       socket.off('message_deleted', handleMessageDeleted);\r\n// //       socket.off('conversation_deleted', handleConversationDeleted); // Dinleyiciyi kaldır\r\n// //     };\r\n// //   }, [conversationId, adminUser]);\r\n\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     const trimmedMessage = newMessage.trim();\r\n// //     if (trimmedMessage === '' || !adminUser) return;\r\n    \r\n// //     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\r\n// //     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\r\n// //     if (!userIdPart) return;\r\n\r\n// //     const receiver_id = parseInt(userIdPart.split('_')[1]);\r\n// //     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\r\n\r\n// //     socket.emit('send_message', {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: adminUser.id,\r\n// //       receiver_id,\r\n// //       vehicle_id,\r\n// //       message: trimmedMessage,\r\n// //     });\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   const handleDeleteMessage = async (messageId) => {\r\n// //     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n// //         try {\r\n// //             const token = localStorage.getItem('token');\r\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n// //                 headers: { 'Authorization': `Bearer ${token}` }\r\n// //             });\r\n// //         } catch (error) {\r\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n// //         }\r\n// //     }\r\n// //   };\r\n\r\n// //   if (!conversationId) {\r\n// //     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\r\n// //   }\r\n  \r\n// //   // *** GÜNCELLEME: Mesaj listesi boş olduğunda daha açıklayıcı bir arayüz sunar ***\r\n// //   if (messages.length === 0) {\r\n// //     return (\r\n// //          <div className=\"admin-chat-box\">\r\n// //             <div className=\"chat-messages-admin\">\r\n// //                  <div style={{ padding: '20px', textAlign: 'center', color: '#888', fontStyle: 'italic' }}>\r\n// //                     Bu sohbette henüz mesaj yok veya sohbet silinmiş.\r\n// //                  </div>\r\n// //                  <div ref={messagesEndRef} />\r\n// //             </div>\r\n// //              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n// //                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n// //             </form>\r\n// //         </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"admin-chat-box\">\r\n// //       <div className=\"chat-messages-admin\">\r\n// //         {messages.map((msg) => {\r\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n// //           return (\r\n// //             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n// //                 <button \r\n// //                     className=\"delete-message-btn\" \r\n// //                     onClick={() => handleDeleteMessage(msg.id)}\r\n// //                     title=\"Mesajı Sil\"\r\n// //                 >\r\n// //                     ×\r\n// //                 </button>\r\n// //                 <p>{msg.message}</p>\r\n// //                 <span className=\"message-time\">\r\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n// //                 </span>\r\n// //               </div>\r\n// //             </div>\r\n// //           );\r\n// //         })}\r\n// //         <div ref={messagesEndRef} />\r\n// //       </div>\r\n      \r\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminChatBox;\r\n// // BU KODUN TAMAMINI KOPYALAYIP MEVCUT AdminChatBox.js DOSYANIZLA DEĞİŞTİRİN\r\n\r\n// // AdminChatBox.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// // AdminChatBox.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import axios from 'axios';\r\n// import './AdminChatBox.css';\r\n// import { socket } from './socket';\r\n\r\n// function AdminChatBox({ conversationId }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [adminUser, setAdminUser] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try { setAdminUser(jwtDecode(token)); } catch (error) { console.error(\"Admin token decode error:\", error); }\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!conversationId || !adminUser) return;\r\n    \r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) return;\r\n\r\n//     if (!socket.connected) socket.connect();\r\n\r\n//     const onConnect = () => socket.emit('join_room', { conversationId, token }); \r\n//     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\r\n//     const handleReceiveMessage = (message) => {\r\n//       if (message.conversation_id === conversationId) setMessages(prev => [...prev, message]);\r\n//     };\r\n//     const handleMessageDeleted = ({ messageId }) => setMessages(prev => prev.filter(msg => msg.id !== messageId));\r\n//     const handleConversationDeleted = (deletedConvId) => {\r\n//         if (conversationId === deletedConvId) setMessages([]);\r\n//     };\r\n\r\n//     socket.on('connect', onConnect);\r\n//     socket.on('load_messages', handleLoadMessages);\r\n//     socket.on('receive_message', handleReceiveMessage);\r\n//     socket.on('message_deleted', handleMessageDeleted);\r\n//     socket.on('conversation_deleted', handleConversationDeleted);\r\n\r\n//     if (socket.connected) onConnect();\r\n\r\n//     return () => {\r\n//       socket.off('connect', onConnect);\r\n//       socket.off('load_messages', handleLoadMessages);\r\n//       socket.off('receive_message', handleReceiveMessage);\r\n//       socket.off('message_deleted', handleMessageDeleted);\r\n//       socket.off('conversation_deleted', handleConversationDeleted);\r\n//     };\r\n//   }, [conversationId, adminUser]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     const trimmedMessage = newMessage.trim();\r\n//     if (trimmedMessage === '' || !adminUser || !conversationId) return;\r\n    \r\n//     const userIdMatch = conversationId.match(/user_(\\d+)/);\r\n//     const vehicleIdMatch = conversationId.match(/vehicle_(\\d+)/);\r\n\r\n//     if (!userIdMatch) {\r\n//       console.error(\"Sohbet kimliğinden kullanıcı ID'si alınamadı:\", conversationId);\r\n//       return;\r\n//     }\r\n\r\n//     const receiver_id = parseInt(userIdMatch[1]);\r\n//     const vehicle_id = vehicleIdMatch ? parseInt(vehicleIdMatch[1]) : null;\r\n\r\n//     socket.emit('send_message', {\r\n//       conversation_id: conversationId,\r\n//       sender_id: adminUser.id,\r\n//       receiver_id: receiver_id,\r\n//       vehicle_id: vehicle_id,\r\n//       message: trimmedMessage,\r\n//     });\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   const handleDeleteMessage = async (messageId) => {\r\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n//                 headers: { 'Authorization': `Bearer ${token}` }\r\n//             });\r\n//         } catch (error) {\r\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   if (!conversationId) {\r\n//     return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\r\n//   }\r\n  \r\n//   if (messages.length === 0) {\r\n//     return (\r\n//          <div className=\"admin-chat-box\">\r\n//             <div className=\"chat-messages-admin\">\r\n//                  <div style={{ padding: '20px', textAlign: 'center', color: '#888', fontStyle: 'italic' }}>\r\n//                     Bu sohbette henüz mesaj yok veya sohbet silinmiş.\r\n//                  </div>\r\n//                  <div ref={messagesEndRef} />\r\n//             </div>\r\n//              <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//                 <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n//                 <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"admin-chat-box\">\r\n//       <div className=\"chat-messages-admin\">\r\n//         {messages.map((msg) => {\r\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n//           return (\r\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n//                 <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\r\n//                 <p>{msg.message}</p>\r\n//                 <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n      \r\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//         <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n//         <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminChatBox;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// AdminChatBox.js (TAM ve EKSİKSİZ KOD)\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport './AdminChatBox.css';\r\nimport { socket } from './socket';\r\n\r\nfunction AdminChatBox({ conversationId }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [adminUser, setAdminUser] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try { setAdminUser(jwtDecode(token)); } catch (error) { console.error(\"Admin token decode error:\", error); }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!conversationId || !adminUser) return;\r\n    \r\n    // *** GÜNCELLEME: socket.connect() buradan kaldırıldı! ***\r\n    \r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n    \r\n    const onConnect = () => socket.emit('join_room', { conversationId, token }); \r\n    const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\r\n    const handleReceiveMessage = (message) => {\r\n      if (message.conversation_id === conversationId) setMessages(prev => [...prev, message]);\r\n    };\r\n    const handleMessageDeleted = ({ messageId }) => setMessages(prev => prev.filter(msg => msg.id !== messageId));\r\n    const handleConversationDeleted = (deletedConvId) => {\r\n        if (conversationId === deletedConvId) setMessages([]);\r\n    };\r\n\r\n    if (socket.connected) onConnect();\r\n    \r\n    socket.on('connect', onConnect);\r\n    socket.on('load_messages', handleLoadMessages);\r\n    socket.on('receive_message', handleReceiveMessage);\r\n    socket.on('message_deleted', handleMessageDeleted);\r\n    socket.on('conversation_deleted', handleConversationDeleted);\r\n\r\n    return () => {\r\n      socket.off('connect', onConnect);\r\n      socket.off('load_messages', handleLoadMessages);\r\n      socket.off('receive_message', handleReceiveMessage);\r\n      socket.off('message_deleted', handleMessageDeleted);\r\n      socket.off('conversation_deleted', handleConversationDeleted);\r\n    };\r\n  }, [conversationId, adminUser]);\r\n  \r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const trimmedMessage = newMessage.trim();\r\n    if (trimmedMessage === '' || !adminUser || !conversationId) return;\r\n    \r\n    const userIdMatch = conversationId.match(/user_(\\d+)/);\r\n    const vehicleIdMatch = conversationId.match(/vehicle_(\\d+)/);\r\n\r\n    if (!userIdMatch) {\r\n      console.error(\"Sohbet kimliğinden kullanıcı ID'si alınamadı:\", conversationId);\r\n      return;\r\n    }\r\n\r\n    const receiver_id = parseInt(userIdMatch[1]);\r\n    const vehicle_id = vehicleIdMatch ? parseInt(vehicleIdMatch[1]) : null;\r\n\r\n    socket.emit('send_message', {\r\n      conversation_id: conversationId,\r\n      sender_id: adminUser.id,\r\n      receiver_id: receiver_id,\r\n      vehicle_id: vehicle_id,\r\n      message: trimmedMessage,\r\n    });\r\n    setNewMessage('');\r\n  };\r\n\r\n  const handleDeleteMessage = async (messageId) => {\r\n    if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n        } catch (error) {\r\n            alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n        }\r\n    }\r\n  };\r\n\r\n  if (!conversationId) {\r\n    return <div className=\"admin-chat-box-empty\"><p>Görüntülemek için bir konuşma seçin.</p></div>;\r\n  }\r\n  \r\n  if (messages.length === 0) {\r\n    return (\r\n         <div className=\"admin-chat-box\">\r\n            <div className=\"chat-messages-admin\">\r\n                 <div style={{ padding: '20px', textAlign: 'center', color: '#888', fontStyle: 'italic' }}>\r\n                    Bu sohbette henüz mesaj yok veya sohbet silinmiş.\r\n                 </div>\r\n                 <div ref={messagesEndRef} />\r\n            </div>\r\n             <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n                <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n                <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n            </form>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin-chat-box\">\r\n      <div className=\"chat-messages-admin\">\r\n        {messages.map((msg) => {\r\n          const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n          return (\r\n            <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n              <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n                <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\r\n                <p>{msg.message}</p>\r\n                <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n        <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Cevabınızı yazın...\" />\r\n        <button type=\"submit\" disabled={!newMessage.trim()}>➢</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminChatBox;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAC3B,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,YAAYA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
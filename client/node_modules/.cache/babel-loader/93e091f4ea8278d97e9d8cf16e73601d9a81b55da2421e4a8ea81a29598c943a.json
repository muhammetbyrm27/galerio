{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n// // import './LoginPage.css';\n// // import { useNavigate } from 'react-router-dom';\n\n// // function LoginPage() {\n// //   const [formType, setFormType] = useState('login'); \n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [error, setError] = useState('');\n// //   const [message, setMessage] = useState('');\n\n// //   const navigate = useNavigate();\n\n// //   const clearFields = () => {\n// //     setEmail('');\n// //     setPassword('');\n// //     setError('');\n// //     setMessage('');\n// //   };\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const res = await axios.post('http://localhost:5000/api/login', { email, password });\n// //       localStorage.setItem('token', res.data.token);\n\n// //       navigate('/dashboard', { replace: true });\n\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || 'Giriş hatası');\n// //     }\n// //   };\n\n// //   const handleRegister = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const res = await axios.post('http://localhost:5000/api/register', {\n// //         email,\n// //         password\n// //       });\n// //       setMessage(res.data.message);\n// //       clearFields();\n// //       setTimeout(() => {\n// //         setFormType('login');\n// //         setMessage(''); \n// //       }, 2000); \n// //     } catch (err) {\n// //       setError(err.response?.data?.message || 'Kayıt hatası');\n// //     }\n// //   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <form className=\"login-form\" onSubmit={formType === 'login' ? handleLogin : handleRegister}>\n//         <h2>{formType === 'login' ? 'Giriş Yap' : 'Kaydol'}</h2>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"E-posta\"\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           required\n//         />\n//         <input\n//           type=\"password\"\n//           placeholder=\"Şifre\"\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           required\n//         />\n\n//         <button type=\"submit\">\n//           {formType === 'login' ? 'Giriş Yap' : 'Kaydol'}\n//         </button>\n\n//         {error && <p className=\"error\">{error}</p>}\n//         {message && <p className=\"success\">{message}</p>}\n\n// //         <div className=\"form-switch\">\n// //           <button\n// //             type=\"button\"\n// //             onClick={() => {\n// //               setFormType(formType === 'login' ? 'register' : 'login');\n// //               clearFields();\n// //             }}\n// //           >\n// //             {formType === 'login' ? 'Kaydol' : 'Giriş Yap'}\n// //           </button>\n// //           <button type=\"button\" onClick={() => navigate('/forgot-password')}>\n// //             Şifremi Unuttum\n// //           </button>\n// //         </div>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './LoginPage.css';\n// import { useNavigate } from 'react-router-dom';\n// import { jwtDecode } from 'jwt-decode';\n\n// function LoginPage() {\n//   const [loginMode, setLoginMode] = useState('admin');\n//   const [formType, setFormType] = useState('login'); \n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [error, setError] = useState('');\n//   const [message, setMessage] = useState('');\n\n//   const navigate = useNavigate();\n\n//   const clearFields = () => {\n//     setEmail('');\n//     setPassword('');\n//     setError('');\n//     setMessage('');\n//   };\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n//     setError('');\n//     try {\n//       const res = await axios.post('http://localhost:5000/api/login', { email, password });\n//       const token = res.data.token;\n//       localStorage.setItem('token', token);\n\n//       const decodedToken = jwtDecode(token);\n\n//       if (decodedToken.role === 'admin') {\n//         // Yönetici ise, senin sevdiğin eski Dashboard'a gider.\n//         navigate('/dashboard', { replace: true });\n//       } else {\n//         // Kullanıcı ise, UserDashboard'a gider.\n//         navigate('/user-dashboard', { replace: true });\n//       }\n//     } catch (err) {\n//       console.error(\"Giriş hatası detayı:\", err); // Hataları konsolda görmek için\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\n//     }\n//   };\n\n//   const handleRegister = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const res = await axios.post('http://localhost:5000/api/register', {\n//         email,\n//         password\n//       });\n//       setMessage(res.data.message);\n//       clearFields();\n//       setTimeout(() => {\n//         setFormType('login');\n//         setMessage(''); \n//       }, 2000); \n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Kayıt hatası');\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <div className=\"login-wrapper\">\n//         <div className=\"role-tabs\">\n//           <button \n//             className={`tab-button ${loginMode === 'admin' ? 'active' : ''}`}\n//             onClick={() => setLoginMode('admin')}\n//           >\n//             Yönetici Girişi\n//           </button>\n//           <button \n//             className={`tab-button ${loginMode === 'user' ? 'active' : ''}`}\n//             onClick={() => setLoginMode('user')}\n//           >\n//             Kullanıcı Girişi\n//           </button>\n//         </div>\n//         <form className=\"login-form\" onSubmit={formType === 'login' ? handleLogin : handleRegister}>\n//           <h2>{formType === 'login' ? (loginMode === 'admin' ? 'Yönetici Girişi' : 'Kullanıcı Girişi') : 'Kaydol'}</h2>\n//           <input\n//             type=\"email\"\n//             placeholder=\"E-posta Adresi\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Şifre\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">\n//             {formType === 'login' ? 'Giriş Yap' : 'Kaydol'}\n//           </button>\n//           {error && <p className=\"error\">{error}</p>}\n//           {message && <p className=\"success\">{message}</p>}\n//           <div className=\"form-switch\">\n//             <button\n//               type=\"button\"\n//               onClick={() => {\n//                 setFormType(formType === 'login' ? 'register' : 'login');\n//                 clearFields();\n//               }}\n//             >\n//               {formType === 'login' ? 'Kaydol' : 'Giriş Yap'}\n//             </button>\n//             <button type=\"button\" onClick={() => navigate('/forgot-password')}>\n//               Şifremi Unuttum\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default LoginPage;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './LoginPage.css';\n// import { useNavigate } from 'react-router-dom';\n// import { jwtDecode } from 'jwt-decode';\n\n// function LoginPage() {\n//   // Sadece hangi sekmenin aktif olduğunu tutan tek bir state\n//   const [activeTab, setActiveTab] = useState('admin'); // 'admin' veya 'user'\n\n//   // Her form için ayrı state'ler. Bu, karışıklığı önler.\n//   const [adminEmail, setAdminEmail] = useState('');\n//   const [adminPassword, setAdminPassword] = useState('');\n\n//   const [userEmail, setUserEmail] = useState('');\n//   const [userPassword, setUserPassword] = useState('');\n\n//   const [error, setError] = useState('');\n//   const navigate = useNavigate();\n// const [registerName, setRegisterName] = useState('');\n// const [registerEmail, setRegisterEmail] = useState('');\n// const [registerPassword, setRegisterPassword] = useState('');\n\n//   // YÖNETİCİ GİRİŞ FONKSİYONU\n//   const handleAdminLogin = async (e) => {\n//     e.preventDefault();\n//     setError('');\n//     try {\n//       const res = await axios.post('http://localhost:5000/api/login', { email: adminEmail, password: adminPassword });\n//       const token = res.data.token;\n//       const decodedToken = jwtDecode(token);\n\n//       // Sadece admin ise devam et, değilse hata ver.\n//       if (decodedToken.role !== 'admin') {\n//         setError('Bu alan sadece yöneticilere aittir.');\n//         return;\n//       }\n\n//       localStorage.setItem('token', token);\n//       navigate('/dashboard', { replace: true });\n\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\n//     }\n//   };\n// const handleRegister = async (e) => {\n//   e.preventDefault();\n//   try {\n//     // Burada kayıt için backend API çağrısı yapabilirsin\n//     const res = await axios.post('http://localhost:5000/api/register', {\n//       name: registerName,\n//       email: registerEmail,\n//       password: registerPassword,\n//     });\n//     alert('Kayıt başarılı! Giriş yapabilirsiniz.');\n//     setActiveTab('user');  // Kayıt sonrası kullanıcı giriş tabına geç\n//   } catch (err) {\n//     alert(err.response?.data?.message || 'Kayıt başarısız oldu');\n//   }\n// };\n\n//   // KULLANICI GİRİŞ FONKSİYONU\n//   const handleUserLogin = async (e) => {\n//     e.preventDefault();\n//     setError('');\n//     try {\n//       const res = await axios.post('http://localhost:5000/api/login', { email: userEmail, password: userPassword });\n//       const token = res.data.token;\n//       // Kullanıcının admin olup olmadığını kontrol etmeye gerek yok, backend zaten doğru rolü veriyor.\n//       localStorage.setItem('token', token);\n//       navigate('/home', { replace: true });\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\n//     }\n//   };\n\n//   const clearErrors = () => setError('');\n\n//   return (\n//     <div className=\"login-container\">\n//       <div className=\"login-wrapper\">\n//         <div className=\"role-tabs\">\n//           <button \n//             className={`tab-button ${activeTab === 'admin' ? 'active' : ''}`}\n//             onClick={() => { setActiveTab('admin'); clearErrors(); }}\n//           >\n//             Yönetici Girişi\n//           </button>\n//           <button \n//             className={`tab-button ${activeTab === 'user' ? 'active' : ''}`}\n//             onClick={() => { setActiveTab('user'); clearErrors(); }}\n//           >\n//             Kullanıcı Girişi\n//           </button>\n//         </div>\n\n//         {/* === YÖNETİCİ GİRİŞ FORMU === */}\n//         {activeTab === 'admin' && (\n//           <form className=\"login-form\" onSubmit={handleAdminLogin}>\n//             <h2>Yönetici Girişi</h2>\n//             <input\n//               type=\"email\"\n//               placeholder=\"E-posta Adresi\"\n//               value={adminEmail}\n//               onChange={(e) => setAdminEmail(e.target.value)}\n//               required\n//             />\n//             <input\n//               type=\"password\"\n//               placeholder=\"Şifre\"\n//               value={adminPassword}\n//               onChange={(e) => setAdminPassword(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Giriş Yap</button>\n//             {error && <p className=\"error\">{error}</p>}\n//             <div className=\"form-switch admin-switch\">\n//               {/* Yönetici formunda sadece \"Şifremi Unuttum\" var */}\n//               <span onClick={() => navigate('/forgot-password')}>Şifremi Unuttum</span>\n//             </div>\n//           </form>\n//         )}\n\n//         {/* === KULLANICI GİRİŞ FORMU === */}\n//         {activeTab === 'user' && (\n//           <form className=\"login-form\" onSubmit={handleUserLogin}>\n//             <h2>Kullanıcı Girişi</h2>\n//             <input\n//               type=\"email\"\n//               placeholder=\"E-posta Adresi\"\n//               value={userEmail}\n//               onChange={(e) => setUserEmail(e.target.value)}\n//               required\n//             />\n//             <input\n//               type=\"password\"\n//               placeholder=\"Şifre\"\n//               value={userPassword}\n//               onChange={(e) => setUserPassword(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Giriş Yap</button>\n//             {error && <p className=\"error\">{error}</p>}\n//             {/* Kullanıcı formunda hepsi var */}\n//             <div className=\"form-switch\">\n//               <button type=\"button\" onClick={() => navigate('/register')}>\n//   Kaydol\n// </button>\n//               <button type=\"button\" onClick={() => navigate('/forgot-password')}>\n//                 Şifremi Unuttum\n//               </button>\n//             </div>\n//           </form>\n\n//         )}\n//         {activeTab === 'register' && (\n//   <form className=\"login-form\" onSubmit={handleRegister}>\n//     <h2>Kayıt Ol</h2>\n//     <input\n//       type=\"text\"\n//       placeholder=\"Ad Soyad\"\n//       value={registerName}\n//       onChange={(e) => setRegisterName(e.target.value)}\n//       required\n//     />\n//     <input\n//       type=\"email\"\n//       placeholder=\"E-posta Adresi\"\n//       value={registerEmail}\n//       onChange={(e) => setRegisterEmail(e.target.value)}\n//       required\n//     />\n//     <input\n//       type=\"password\"\n//       placeholder=\"Şifre\"\n//       value={registerPassword}\n//       onChange={(e) => setRegisterPassword(e.target.value)}\n//       required\n//     />\n//     <button type=\"submit\">Kaydol</button>\n//   </form>\n// )}\n\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default LoginPage;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './LoginPage.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  // 3 farklı modumuz var: adminLogin, userLogin, userRegister\n  const [activeMode, setActiveMode] = useState('adminLogin');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState(''); // Kayıt için yeni state\n\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n\n  // Formları temizlemek için\n  const clearForm = () => {\n    setEmail('');\n    setPassword('');\n    setName('');\n    setError('');\n    setMessage('');\n  };\n\n  // Hem admin hem kullanıcı için tek giriş fonksiyonu\n  const handleLogin = async e => {\n    e.preventDefault();\n    setError('');\n    try {\n      const res = await axios.post('http://localhost:5000/api/login', {\n        email,\n        password\n      });\n      const token = res.data.token;\n      localStorage.setItem('token', token);\n      const decodedToken = jwtDecode(token);\n      if (decodedToken.role === 'admin') {\n        navigate('/dashboard', {\n          replace: true\n        });\n      } else {\n        navigate('/home', {\n          replace: true\n        });\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Giriş işlemi başarısız');\n    }\n  };\n\n  // Kayıt fonksiyonu\n  const handleRegister = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    try {\n      const res = await axios.post('http://localhost:5000/api/register', {\n        name,\n        email,\n        password\n      });\n      setMessage(res.data.message);\n      // 2 saniye sonra kullanıcı giriş sekmesine yönlendir\n      setTimeout(() => {\n        setActiveMode('userLogin');\n        clearForm();\n      }, 2000);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Kayıt başarısız oldu');\n    }\n  };\n\n  // Hangi formun gösterileceğini belirleyen fonksiyon\n  const renderForm = () => {\n    if (activeMode === 'userRegister') {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-form\",\n        onSubmit: handleRegister,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Kay\\u0131t Ol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ad Soyad\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"E-posta Adresi\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"\\u015Eifre\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Kayd\\u0131 Tamamla\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-switch\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              setActiveMode('userLogin');\n              clearForm();\n            },\n            children: \"Zaten hesab\\u0131n var m\\u0131? Giri\\u015F Yap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Hem admin hem de kullanıcı girişi için aynı form yapısı\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: activeMode === 'adminLogin' ? 'Yönetici Girişi' : 'Kullanıcı Girişi'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"E-posta Adresi\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"\\u015Eifre\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Giri\\u015F Yap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-switch\",\n        children: [activeMode === 'userLogin' && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => {\n            setActiveMode('userRegister');\n            clearForm();\n          },\n          children: \"Hesab\\u0131n yok mu? Kaydol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => navigate('/forgot-password'),\n          children: \"\\u015Eifremi Unuttum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"role-tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeMode === 'adminLogin' ? 'active' : ''}`,\n          onClick: () => {\n            setActiveMode('adminLogin');\n            clearForm();\n          },\n          children: \"Y\\xF6netici\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeMode === 'userLogin' || activeMode === 'userRegister' ? 'active' : ''}`,\n          onClick: () => {\n            setActiveMode('userLogin');\n            clearForm();\n          },\n          children: \"Kullan\\u0131c\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error external-error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 19\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success external-success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 21\n      }, this), renderForm()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"uiaJhK9RtDTKo2vpXS5nj5FtSw0=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jwtDecode","jsxDEV","_jsxDEV","LoginPage","_s","activeMode","setActiveMode","email","setEmail","password","setPassword","name","setName","error","setError","message","setMessage","navigate","clearForm","handleLogin","e","preventDefault","res","post","token","data","localStorage","setItem","decodedToken","role","replace","err","_err$response","_err$response$data","response","handleRegister","setTimeout","_err$response2","_err$response2$data","renderForm","className","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/LoginPage.js"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import './LoginPage.css';\r\n// // import { useNavigate } from 'react-router-dom';\r\n\r\n// // function LoginPage() {\r\n// //   const [formType, setFormType] = useState('login'); \r\n// //   const [email, setEmail] = useState('');\r\n// //   const [password, setPassword] = useState('');\r\n// //   const [error, setError] = useState('');\r\n// //   const [message, setMessage] = useState('');\r\n  \r\n// //   const navigate = useNavigate();\r\n\r\n// //   const clearFields = () => {\r\n// //     setEmail('');\r\n// //     setPassword('');\r\n// //     setError('');\r\n// //     setMessage('');\r\n// //   };\r\n\r\n// //   const handleLogin = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       const res = await axios.post('http://localhost:5000/api/login', { email, password });\r\n// //       localStorage.setItem('token', res.data.token);\r\n      \r\n// //       navigate('/dashboard', { replace: true });\r\n\r\n// //     } catch (err) {\r\n// //       setError(err.response?.data?.message || 'Giriş hatası');\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleRegister = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       const res = await axios.post('http://localhost:5000/api/register', {\r\n// //         email,\r\n// //         password\r\n// //       });\r\n// //       setMessage(res.data.message);\r\n// //       clearFields();\r\n// //       setTimeout(() => {\r\n// //         setFormType('login');\r\n// //         setMessage(''); \r\n// //       }, 2000); \r\n// //     } catch (err) {\r\n// //       setError(err.response?.data?.message || 'Kayıt hatası');\r\n// //     }\r\n// //   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <form className=\"login-form\" onSubmit={formType === 'login' ? handleLogin : handleRegister}>\r\n//         <h2>{formType === 'login' ? 'Giriş Yap' : 'Kaydol'}</h2>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"E-posta\"\r\n//           value={email}\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           placeholder=\"Şifre\"\r\n//           value={password}\r\n//           onChange={(e) => setPassword(e.target.value)}\r\n//           required\r\n//         />\r\n        \r\n//         <button type=\"submit\">\r\n//           {formType === 'login' ? 'Giriş Yap' : 'Kaydol'}\r\n//         </button>\r\n\r\n//         {error && <p className=\"error\">{error}</p>}\r\n//         {message && <p className=\"success\">{message}</p>}\r\n\r\n// //         <div className=\"form-switch\">\r\n// //           <button\r\n// //             type=\"button\"\r\n// //             onClick={() => {\r\n// //               setFormType(formType === 'login' ? 'register' : 'login');\r\n// //               clearFields();\r\n// //             }}\r\n// //           >\r\n// //             {formType === 'login' ? 'Kaydol' : 'Giriş Yap'}\r\n// //           </button>\r\n// //           <button type=\"button\" onClick={() => navigate('/forgot-password')}>\r\n// //             Şifremi Unuttum\r\n// //           </button>\r\n// //         </div>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './LoginPage.css';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { jwtDecode } from 'jwt-decode';\r\n\r\n// function LoginPage() {\r\n//   const [loginMode, setLoginMode] = useState('admin');\r\n//   const [formType, setFormType] = useState('login'); \r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n  \r\n//   const navigate = useNavigate();\r\n\r\n//   const clearFields = () => {\r\n//     setEmail('');\r\n//     setPassword('');\r\n//     setError('');\r\n//     setMessage('');\r\n//   };\r\n\r\n//   const handleLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     setError('');\r\n//     try {\r\n//       const res = await axios.post('http://localhost:5000/api/login', { email, password });\r\n//       const token = res.data.token;\r\n//       localStorage.setItem('token', token);\r\n      \r\n//       const decodedToken = jwtDecode(token);\r\n      \r\n//       if (decodedToken.role === 'admin') {\r\n//         // Yönetici ise, senin sevdiğin eski Dashboard'a gider.\r\n//         navigate('/dashboard', { replace: true });\r\n//       } else {\r\n//         // Kullanıcı ise, UserDashboard'a gider.\r\n//         navigate('/user-dashboard', { replace: true });\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Giriş hatası detayı:\", err); // Hataları konsolda görmek için\r\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\r\n//     }\r\n//   };\r\n\r\n//   const handleRegister = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const res = await axios.post('http://localhost:5000/api/register', {\r\n//         email,\r\n//         password\r\n//       });\r\n//       setMessage(res.data.message);\r\n//       clearFields();\r\n//       setTimeout(() => {\r\n//         setFormType('login');\r\n//         setMessage(''); \r\n//       }, 2000); \r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Kayıt hatası');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <div className=\"login-wrapper\">\r\n//         <div className=\"role-tabs\">\r\n//           <button \r\n//             className={`tab-button ${loginMode === 'admin' ? 'active' : ''}`}\r\n//             onClick={() => setLoginMode('admin')}\r\n//           >\r\n//             Yönetici Girişi\r\n//           </button>\r\n//           <button \r\n//             className={`tab-button ${loginMode === 'user' ? 'active' : ''}`}\r\n//             onClick={() => setLoginMode('user')}\r\n//           >\r\n//             Kullanıcı Girişi\r\n//           </button>\r\n//         </div>\r\n//         <form className=\"login-form\" onSubmit={formType === 'login' ? handleLogin : handleRegister}>\r\n//           <h2>{formType === 'login' ? (loginMode === 'admin' ? 'Yönetici Girişi' : 'Kullanıcı Girişi') : 'Kaydol'}</h2>\r\n//           <input\r\n//             type=\"email\"\r\n//             placeholder=\"E-posta Adresi\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             required\r\n//           />\r\n//           <input\r\n//             type=\"password\"\r\n//             placeholder=\"Şifre\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//             required\r\n//           />\r\n//           <button type=\"submit\">\r\n//             {formType === 'login' ? 'Giriş Yap' : 'Kaydol'}\r\n//           </button>\r\n//           {error && <p className=\"error\">{error}</p>}\r\n//           {message && <p className=\"success\">{message}</p>}\r\n//           <div className=\"form-switch\">\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => {\r\n//                 setFormType(formType === 'login' ? 'register' : 'login');\r\n//                 clearFields();\r\n//               }}\r\n//             >\r\n//               {formType === 'login' ? 'Kaydol' : 'Giriş Yap'}\r\n//             </button>\r\n//             <button type=\"button\" onClick={() => navigate('/forgot-password')}>\r\n//               Şifremi Unuttum\r\n//             </button>\r\n//           </div>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './LoginPage.css';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { jwtDecode } from 'jwt-decode';\r\n\r\n// function LoginPage() {\r\n//   // Sadece hangi sekmenin aktif olduğunu tutan tek bir state\r\n//   const [activeTab, setActiveTab] = useState('admin'); // 'admin' veya 'user'\r\n\r\n//   // Her form için ayrı state'ler. Bu, karışıklığı önler.\r\n//   const [adminEmail, setAdminEmail] = useState('');\r\n//   const [adminPassword, setAdminPassword] = useState('');\r\n  \r\n//   const [userEmail, setUserEmail] = useState('');\r\n//   const [userPassword, setUserPassword] = useState('');\r\n\r\n//   const [error, setError] = useState('');\r\n//   const navigate = useNavigate();\r\n// const [registerName, setRegisterName] = useState('');\r\n// const [registerEmail, setRegisterEmail] = useState('');\r\n// const [registerPassword, setRegisterPassword] = useState('');\r\n\r\n//   // YÖNETİCİ GİRİŞ FONKSİYONU\r\n//   const handleAdminLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     setError('');\r\n//     try {\r\n//       const res = await axios.post('http://localhost:5000/api/login', { email: adminEmail, password: adminPassword });\r\n//       const token = res.data.token;\r\n//       const decodedToken = jwtDecode(token);\r\n\r\n//       // Sadece admin ise devam et, değilse hata ver.\r\n//       if (decodedToken.role !== 'admin') {\r\n//         setError('Bu alan sadece yöneticilere aittir.');\r\n//         return;\r\n//       }\r\n\r\n//       localStorage.setItem('token', token);\r\n//       navigate('/dashboard', { replace: true });\r\n\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\r\n//     }\r\n//   };\r\n// const handleRegister = async (e) => {\r\n//   e.preventDefault();\r\n//   try {\r\n//     // Burada kayıt için backend API çağrısı yapabilirsin\r\n//     const res = await axios.post('http://localhost:5000/api/register', {\r\n//       name: registerName,\r\n//       email: registerEmail,\r\n//       password: registerPassword,\r\n//     });\r\n//     alert('Kayıt başarılı! Giriş yapabilirsiniz.');\r\n//     setActiveTab('user');  // Kayıt sonrası kullanıcı giriş tabına geç\r\n//   } catch (err) {\r\n//     alert(err.response?.data?.message || 'Kayıt başarısız oldu');\r\n//   }\r\n// };\r\n\r\n//   // KULLANICI GİRİŞ FONKSİYONU\r\n//   const handleUserLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     setError('');\r\n//     try {\r\n//       const res = await axios.post('http://localhost:5000/api/login', { email: userEmail, password: userPassword });\r\n//       const token = res.data.token;\r\n//       // Kullanıcının admin olup olmadığını kontrol etmeye gerek yok, backend zaten doğru rolü veriyor.\r\n//       localStorage.setItem('token', token);\r\n//       navigate('/home', { replace: true });\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Giriş işlemi başarısız');\r\n//     }\r\n//   };\r\n\r\n//   const clearErrors = () => setError('');\r\n  \r\n\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <div className=\"login-wrapper\">\r\n//         <div className=\"role-tabs\">\r\n//           <button \r\n//             className={`tab-button ${activeTab === 'admin' ? 'active' : ''}`}\r\n//             onClick={() => { setActiveTab('admin'); clearErrors(); }}\r\n//           >\r\n//             Yönetici Girişi\r\n//           </button>\r\n//           <button \r\n//             className={`tab-button ${activeTab === 'user' ? 'active' : ''}`}\r\n//             onClick={() => { setActiveTab('user'); clearErrors(); }}\r\n//           >\r\n//             Kullanıcı Girişi\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* === YÖNETİCİ GİRİŞ FORMU === */}\r\n//         {activeTab === 'admin' && (\r\n//           <form className=\"login-form\" onSubmit={handleAdminLogin}>\r\n//             <h2>Yönetici Girişi</h2>\r\n//             <input\r\n//               type=\"email\"\r\n//               placeholder=\"E-posta Adresi\"\r\n//               value={adminEmail}\r\n//               onChange={(e) => setAdminEmail(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               type=\"password\"\r\n//               placeholder=\"Şifre\"\r\n//               value={adminPassword}\r\n//               onChange={(e) => setAdminPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//             <button type=\"submit\">Giriş Yap</button>\r\n//             {error && <p className=\"error\">{error}</p>}\r\n//             <div className=\"form-switch admin-switch\">\r\n//               {/* Yönetici formunda sadece \"Şifremi Unuttum\" var */}\r\n//               <span onClick={() => navigate('/forgot-password')}>Şifremi Unuttum</span>\r\n//             </div>\r\n//           </form>\r\n//         )}\r\n\r\n//         {/* === KULLANICI GİRİŞ FORMU === */}\r\n//         {activeTab === 'user' && (\r\n//           <form className=\"login-form\" onSubmit={handleUserLogin}>\r\n//             <h2>Kullanıcı Girişi</h2>\r\n//             <input\r\n//               type=\"email\"\r\n//               placeholder=\"E-posta Adresi\"\r\n//               value={userEmail}\r\n//               onChange={(e) => setUserEmail(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               type=\"password\"\r\n//               placeholder=\"Şifre\"\r\n//               value={userPassword}\r\n//               onChange={(e) => setUserPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//             <button type=\"submit\">Giriş Yap</button>\r\n//             {error && <p className=\"error\">{error}</p>}\r\n//             {/* Kullanıcı formunda hepsi var */}\r\n//             <div className=\"form-switch\">\r\n//               <button type=\"button\" onClick={() => navigate('/register')}>\r\n//   Kaydol\r\n// </button>\r\n//               <button type=\"button\" onClick={() => navigate('/forgot-password')}>\r\n//                 Şifremi Unuttum\r\n//               </button>\r\n//             </div>\r\n//           </form>\r\n          \r\n//         )}\r\n//         {activeTab === 'register' && (\r\n//   <form className=\"login-form\" onSubmit={handleRegister}>\r\n//     <h2>Kayıt Ol</h2>\r\n//     <input\r\n//       type=\"text\"\r\n//       placeholder=\"Ad Soyad\"\r\n//       value={registerName}\r\n//       onChange={(e) => setRegisterName(e.target.value)}\r\n//       required\r\n//     />\r\n//     <input\r\n//       type=\"email\"\r\n//       placeholder=\"E-posta Adresi\"\r\n//       value={registerEmail}\r\n//       onChange={(e) => setRegisterEmail(e.target.value)}\r\n//       required\r\n//     />\r\n//     <input\r\n//       type=\"password\"\r\n//       placeholder=\"Şifre\"\r\n//       value={registerPassword}\r\n//       onChange={(e) => setRegisterPassword(e.target.value)}\r\n//       required\r\n//     />\r\n//     <button type=\"submit\">Kaydol</button>\r\n//   </form>\r\n// )}\r\n\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LoginPage;\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './LoginPage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nfunction LoginPage() {\r\n  // 3 farklı modumuz var: adminLogin, userLogin, userRegister\r\n  const [activeMode, setActiveMode] = useState('adminLogin'); \r\n  \r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState(''); // Kayıt için yeni state\r\n\r\n  const [error, setError] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // Formları temizlemek için\r\n  const clearForm = () => {\r\n    setEmail('');\r\n    setPassword('');\r\n    setName('');\r\n    setError('');\r\n    setMessage('');\r\n  };\r\n\r\n  // Hem admin hem kullanıcı için tek giriş fonksiyonu\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/api/login', { email, password });\r\n      const token = res.data.token;\r\n      localStorage.setItem('token', token);\r\n      const decodedToken = jwtDecode(token);\r\n      \r\n      if (decodedToken.role === 'admin') {\r\n        navigate('/dashboard', { replace: true });\r\n      } else {\r\n        navigate('/home', { replace: true });\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Giriş işlemi başarısız');\r\n    }\r\n  };\r\n\r\n  // Kayıt fonksiyonu\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setMessage('');\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/api/register', { name, email, password });\r\n      setMessage(res.data.message);\r\n      // 2 saniye sonra kullanıcı giriş sekmesine yönlendir\r\n      setTimeout(() => {\r\n        setActiveMode('userLogin');\r\n        clearForm();\r\n      }, 2000);\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Kayıt başarısız oldu');\r\n    }\r\n  };\r\n\r\n  // Hangi formun gösterileceğini belirleyen fonksiyon\r\n  const renderForm = () => {\r\n    if (activeMode === 'userRegister') {\r\n      return (\r\n        <form className=\"login-form\" onSubmit={handleRegister}>\r\n          <h2>Kayıt Ol</h2>\r\n          <input type=\"text\" placeholder=\"Ad Soyad\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n          <input type=\"email\" placeholder=\"E-posta Adresi\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n          <input type=\"password\" placeholder=\"Şifre\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n          <button type=\"submit\">Kaydı Tamamla</button>\r\n          <div className=\"form-switch\">\r\n            <button type=\"button\" onClick={() => { setActiveMode('userLogin'); clearForm(); }}>\r\n              Zaten hesabın var mı? Giriş Yap\r\n            </button>\r\n          </div>\r\n        </form>\r\n      );\r\n    }\r\n    \r\n    // Hem admin hem de kullanıcı girişi için aynı form yapısı\r\n    return (\r\n      <form className=\"login-form\" onSubmit={handleLogin}>\r\n        <h2>{activeMode === 'adminLogin' ? 'Yönetici Girişi' : 'Kullanıcı Girişi'}</h2>\r\n        <input type=\"email\" placeholder=\"E-posta Adresi\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n        <input type=\"password\" placeholder=\"Şifre\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n        <button type=\"submit\">Giriş Yap</button>\r\n        <div className=\"form-switch\">\r\n          {/* Sadece kullanıcı girişindeyken \"Kaydol\" butonu görünsün */}\r\n          {activeMode === 'userLogin' && (\r\n            <button type=\"button\" onClick={() => { setActiveMode('userRegister'); clearForm(); }}>\r\n              Hesabın yok mu? Kaydol\r\n            </button>\r\n          )}\r\n          <button type=\"button\" onClick={() => navigate('/forgot-password')}>\r\n            Şifremi Unuttum\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-wrapper\">\r\n        <div className=\"role-tabs\">\r\n          <button \r\n            className={`tab-button ${activeMode === 'adminLogin' ? 'active' : ''}`}\r\n            onClick={() => { setActiveMode('adminLogin'); clearForm(); }}\r\n          >\r\n            Yönetici\r\n          </button>\r\n          <button \r\n            className={`tab-button ${activeMode === 'userLogin' || activeMode === 'userRegister' ? 'active' : ''}`}\r\n            onClick={() => { setActiveMode('userLogin'); clearForm(); }}\r\n          >\r\n            Kullanıcı\r\n          </button>\r\n        </div>\r\n        {/* Hata ve başarı mesajlarını formların dışına taşıdık */}\r\n        {error && <p className=\"error external-error\">{error}</p>}\r\n        {message && <p className=\"success external-success\">{message}</p>}\r\n        {renderForm()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,YAAY,CAAC;EAE1D,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtC,MAAM,CAACgB,KAAK,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
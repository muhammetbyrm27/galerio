{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\UserMessagesButton.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { socket } from './socket';\n// import { useNavigate } from 'react-router-dom';\n// import './UserMessagesButton.css';\n\n// function UserMessagesButton() {\n//   const [unreadCount, setUnreadCount] = useState(0);\n//   const navigate = useNavigate();\n\n//   // OkunmamÄ±ÅŸ mesaj sayÄ±sÄ±nÄ± getir\n//   const fetchUnreadCount = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) return;\n\n//       const response = await axios.get('http://localhost:5000/api/user-notifications/unread-count', {\n//         headers: { 'Authorization': `Bearer ${token}` }\n//       });\n//       setUnreadCount(response.data.unreadCount);\n//     } catch (error) {\n//       console.error('OkunmamÄ±ÅŸ mesaj sayÄ±sÄ± alÄ±namadÄ±:', error);\n//       // Hata durumunda sayÄ±yÄ± sÄ±fÄ±rlama, kullanÄ±cÄ± deneyimini bozmamak iÃ§in\n//     }\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) return;\n\n//     // Ä°lk yÃ¼klemede sayÄ±yÄ± getir\n//     fetchUnreadCount();\n\n//     // Socket baÄŸlantÄ±sÄ±nÄ± kur\n//     if (!socket.connected) {\n//       socket.connect();\n//     }\n\n//     // Yeni mesaj geldiÄŸinde sayÄ±yÄ± artÄ±r\n//     const handleNewUnreadMessage = (data) => {\n//       console.log('ðŸ“© KullanÄ±cÄ±ya yeni mesaj bildirimi:', data);\n//       setUnreadCount(prev => prev + 1);\n//     };\n\n//     // Bildirimler temizlendiÄŸinde sayÄ±yÄ± sÄ±fÄ±rla\n//     const handleNotificationsReset = () => {\n//       console.log('ðŸ“­ KullanÄ±cÄ± bildirimleri sÄ±fÄ±rlandÄ±');\n//       setUnreadCount(0);\n//     };\n\n//     // Socket event'lerini dinle\n//     socket.on('user_new_unread_message', handleNewUnreadMessage);\n//     socket.on('user_notifications_were_reset', handleNotificationsReset);\n\n//     return () => {\n//       socket.off('user_new_unread_message', handleNewUnreadMessage);\n//       socket.off('user_notifications_were_reset', handleNotificationsReset);\n//     };\n//   }, []);\n\n//   const handleMessagesClick = () => {\n//     navigate('/messages');\n//   };\n\n//   return (\n//     <button className=\"user-messages-button\" onClick={handleMessagesClick} title=\"MesajlarÄ±m\">\n//       <span className=\"messages-icon\">ðŸ’¬</span>\n//       <span className=\"messages-text\">Mesajlar</span>\n//       {unreadCount > 0 && (\n//         <span className=\"unread-badge\">{unreadCount > 99 ? '99+' : unreadCount}</span>\n//       )}\n//     </button>\n//   );\n// }\n\n// export default UserMessagesButton;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { socket } from './socket';\nimport { useNavigate } from 'react-router-dom';\nimport './UserMessagesButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserMessagesButton() {\n  _s();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const navigate = useNavigate();\n  const fetchUnreadCount = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      const response = await axios.get('http://localhost:5000/api/user-notifications/unread-count', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setUnreadCount(response.data.unreadCount);\n    } catch (error) {\n      console.error('OkunmamÄ±ÅŸ mesaj sayÄ±sÄ± alÄ±namadÄ±:', error);\n    }\n  };\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    fetchUnreadCount();\n    if (!socket.connected) {\n      socket.connect();\n    }\n    const handleNewUnreadMessage = data => {\n      console.log('ðŸ“© KullanÄ±cÄ±ya yeni mesaj bildirimi:', data);\n      setUnreadCount(prev => prev + 1);\n    };\n    const handleNotificationsReset = () => {\n      console.log('ðŸ“­ KullanÄ±cÄ± bildirimleri sÄ±fÄ±rlandÄ±');\n      setUnreadCount(0);\n    };\n    socket.on('user_new_unread_message', handleNewUnreadMessage);\n    socket.on('user_notifications_were_reset', handleNotificationsReset);\n    return () => {\n      socket.off('user_new_unread_message', handleNewUnreadMessage);\n      socket.off('user_notifications_were_reset', handleNotificationsReset);\n    };\n  }, []);\n  const handleMessagesClick = () => {\n    // *** DEÄžÄ°ÅžÄ°KLÄ°K: YÃ¶nlendirme adresi dÃ¼zeltildi ***\n    navigate('/mesajlarim');\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"user-messages-button\",\n    onClick: handleMessagesClick,\n    title: \"Mesajlar\\u0131m\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"messages-icon\",\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"messages-text\",\n      children: \"Mesajlar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"unread-badge\",\n      children: unreadCount > 99 ? '99+' : unreadCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(UserMessagesButton, \"AymnCj9uWYv5wqTTYPjP8EtRTI8=\", false, function () {\n  return [useNavigate];\n});\n_c = UserMessagesButton;\nexport default UserMessagesButton;\nvar _c;\n$RefreshReg$(_c, \"UserMessagesButton\");","map":{"version":3,"names":["React","useState","useEffect","axios","socket","useNavigate","jsxDEV","_jsxDEV","UserMessagesButton","_s","unreadCount","setUnreadCount","navigate","fetchUnreadCount","token","localStorage","getItem","response","get","headers","data","error","console","connected","connect","handleNewUnreadMessage","log","prev","handleNotificationsReset","on","off","handleMessagesClick","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/UserMessagesButton.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { socket } from './socket';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import './UserMessagesButton.css';\r\n\r\n// function UserMessagesButton() {\r\n//   const [unreadCount, setUnreadCount] = useState(0);\r\n//   const navigate = useNavigate();\r\n\r\n//   // OkunmamÄ±ÅŸ mesaj sayÄ±sÄ±nÄ± getir\r\n//   const fetchUnreadCount = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem('token');\r\n//       if (!token) return;\r\n\r\n//       const response = await axios.get('http://localhost:5000/api/user-notifications/unread-count', {\r\n//         headers: { 'Authorization': `Bearer ${token}` }\r\n//       });\r\n//       setUnreadCount(response.data.unreadCount);\r\n//     } catch (error) {\r\n//       console.error('OkunmamÄ±ÅŸ mesaj sayÄ±sÄ± alÄ±namadÄ±:', error);\r\n//       // Hata durumunda sayÄ±yÄ± sÄ±fÄ±rlama, kullanÄ±cÄ± deneyimini bozmamak iÃ§in\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) return;\r\n\r\n//     // Ä°lk yÃ¼klemede sayÄ±yÄ± getir\r\n//     fetchUnreadCount();\r\n\r\n//     // Socket baÄŸlantÄ±sÄ±nÄ± kur\r\n//     if (!socket.connected) {\r\n//       socket.connect();\r\n//     }\r\n\r\n//     // Yeni mesaj geldiÄŸinde sayÄ±yÄ± artÄ±r\r\n//     const handleNewUnreadMessage = (data) => {\r\n//       console.log('ðŸ“© KullanÄ±cÄ±ya yeni mesaj bildirimi:', data);\r\n//       setUnreadCount(prev => prev + 1);\r\n//     };\r\n\r\n//     // Bildirimler temizlendiÄŸinde sayÄ±yÄ± sÄ±fÄ±rla\r\n//     const handleNotificationsReset = () => {\r\n//       console.log('ðŸ“­ KullanÄ±cÄ± bildirimleri sÄ±fÄ±rlandÄ±');\r\n//       setUnreadCount(0);\r\n//     };\r\n\r\n//     // Socket event'lerini dinle\r\n//     socket.on('user_new_unread_message', handleNewUnreadMessage);\r\n//     socket.on('user_notifications_were_reset', handleNotificationsReset);\r\n\r\n//     return () => {\r\n//       socket.off('user_new_unread_message', handleNewUnreadMessage);\r\n//       socket.off('user_notifications_were_reset', handleNotificationsReset);\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleMessagesClick = () => {\r\n//     navigate('/messages');\r\n//   };\r\n\r\n//   return (\r\n//     <button className=\"user-messages-button\" onClick={handleMessagesClick} title=\"MesajlarÄ±m\">\r\n//       <span className=\"messages-icon\">ðŸ’¬</span>\r\n//       <span className=\"messages-text\">Mesajlar</span>\r\n//       {unreadCount > 0 && (\r\n//         <span className=\"unread-badge\">{unreadCount > 99 ? '99+' : unreadCount}</span>\r\n//       )}\r\n//     </button>\r\n//   );\r\n// }\r\n\r\n// export default UserMessagesButton;\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { socket } from './socket';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './UserMessagesButton.css';\r\n\r\nfunction UserMessagesButton() {\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  const fetchUnreadCount = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return;\r\n\r\n      const response = await axios.get('http://localhost:5000/api/user-notifications/unread-count', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setUnreadCount(response.data.unreadCount);\r\n    } catch (error) {\r\n      console.error('OkunmamÄ±ÅŸ mesaj sayÄ±sÄ± alÄ±namadÄ±:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n\r\n    fetchUnreadCount();\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n\r\n    const handleNewUnreadMessage = (data) => {\r\n      console.log('ðŸ“© KullanÄ±cÄ±ya yeni mesaj bildirimi:', data);\r\n      setUnreadCount(prev => prev + 1);\r\n    };\r\n\r\n    const handleNotificationsReset = () => {\r\n      console.log('ðŸ“­ KullanÄ±cÄ± bildirimleri sÄ±fÄ±rlandÄ±');\r\n      setUnreadCount(0);\r\n    };\r\n\r\n    socket.on('user_new_unread_message', handleNewUnreadMessage);\r\n    socket.on('user_notifications_were_reset', handleNotificationsReset);\r\n\r\n    return () => {\r\n      socket.off('user_new_unread_message', handleNewUnreadMessage);\r\n      socket.off('user_notifications_were_reset', handleNotificationsReset);\r\n    };\r\n  }, []);\r\n\r\n  const handleMessagesClick = () => {\r\n    // *** DEÄžÄ°ÅžÄ°KLÄ°K: YÃ¶nlendirme adresi dÃ¼zeltildi ***\r\n    navigate('/mesajlarim');\r\n  };\r\n\r\n  return (\r\n    <button className=\"user-messages-button\" onClick={handleMessagesClick} title=\"MesajlarÄ±m\">\r\n      <span className=\"messages-icon\">ðŸ’¬</span>\r\n      <span className=\"messages-text\">Mesajlar</span>\r\n      {unreadCount > 0 && (\r\n        <span className=\"unread-badge\">{unreadCount > 99 ? '99+' : unreadCount}</span>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default UserMessagesButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
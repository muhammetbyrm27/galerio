{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\AdminChatBox.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import io from 'socket.io-client';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './AdminChatBox.css';\n\n// // const socket = io('http://localhost:5000');\n\n// // function AdminChatBox({ conversationId }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [adminUser, setAdminUser] = useState(null);\n// //   const [conversationInfo, setConversationInfo] = useState({});\n// //   const messagesEndRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       try {\n// //         const decoded = jwtDecode(token);\n// //         setAdminUser(decoded);\n// //       } catch (error) {\n// //         console.error(\"Admin token decode error:\", error);\n// //       }\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     // Sadece conversationId değiştiğinde çalış\n// //     if (conversationId && adminUser) {\n// //       const parts = conversationId.split('-');\n// //       const userIdPart = parts.find(p => p.startsWith('user_'));\n// //       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\n\n// //       const userId = userIdPart ? userIdPart.split('_')[1] : null;\n// //       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\n// //       setConversationInfo({ userId, vehicleId });\n\n// //       socket.emit('join_room', conversationId);\n\n// //       const handleLoadMessages = (loadedMessages) => {\n// //         setMessages(loadedMessages);\n// //       };\n\n// //       const handleReceiveMessage = (message) => {\n// //         // Sadece mevcut sohbetimize aitse mesajı ekle\n// //         if (message.conversation_id === conversationId) {\n// //             setMessages((prev) => [...prev, message]);\n// //         }\n// //       };\n\n// //       socket.on('load_messages', handleLoadMessages);\n// //       socket.on('receive_message', handleReceiveMessage);\n\n// //       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\n// //       return () => {\n// //         socket.off('load_messages', handleLoadMessages);\n// //         socket.off('receive_message', handleReceiveMessage);\n// //         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\n// //         // socket.emit('leave_room', conversationId);\n// //       };\n// //     }\n// //   }, [conversationId, adminUser]);\n\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\n\n// //     const messageData = {\n// //       conversation_id: conversationId,\n// //       sender_id: adminUser.id,\n// //       receiver_id: parseInt(conversationInfo.userId),\n// //       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\n// //       message: newMessage.trim(),\n// //     };\n\n// //     socket.emit('send_message', messageData);\n// //     setNewMessage('');\n// //   };\n\n// //   if (!conversationId) {\n// //     return (\n// //       <div className=\"admin-chat-box-empty\">\n// //         <p>Görüntülemek için bir konuşma seçin.</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"admin-chat-box\">\n// //       <div className=\"chat-messages-admin\">\n// //         {messages.map((msg, index) => {\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n// //           return (\n// //             <div\n// //               key={msg.id || index}\n// //               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\n// //             >\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n// //                 <p>{msg.message}</p>\n// //                 <span className=\"message-time\">\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n// //                 </span>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //         <div ref={messagesEndRef} />\n// //       </div>\n\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //         <input\n// //           type=\"text\"\n// //           value={newMessage}\n// //           onChange={(e) => setNewMessage(e.target.value)}\n// //           placeholder=\"Cevabınızı yazın...\"\n// //         />\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>\n// //           ➢\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminChatBox;\n// import React, { useState, useEffect, useRef } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import axios from 'axios'; // <-- Gerekli import eklendi\n// import './AdminChatBox.css';\n// import { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\n\n// function AdminChatBox({ conversationId }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [adminUser, setAdminUser] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try {\n//         setAdminUser(jwtDecode(token));\n//       } catch (error) {\n//         console.error(\"Admin token decode error:\", error);\n//       }\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!conversationId || !adminUser) return;\n\n//     // Bağlantıyı manuel olarak başlat\n//     socket.connect();\n\n//     function onConnect() {\n//         console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\n//         socket.emit('join_room', conversationId);\n//     }\n\n//     function handleLoadMessages(loadedMessages) {\n//       setMessages(loadedMessages);\n//     }\n\n//     function handleReceiveMessage(message) {\n//       if (message.conversation_id === conversationId) {\n//         setMessages((prev) => [...prev, message]);\n//       }\n//     }\n\n//     // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\n//     function handleMessageDeleted({ messageId }) {\n//         setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\n//     }\n\n//     // Listener'ları ekle\n//     socket.on('connect', onConnect);\n//     socket.on('load_messages', handleLoadMessages);\n//     socket.on('receive_message', handleReceiveMessage);\n//     socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\n\n//     // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\n//     if (socket.connected) {\n//         onConnect();\n//     }\n\n//     // Component'tan çıkıldığında temizlik yap\n//     return () => {\n//       socket.off('connect', onConnect);\n//       socket.off('load_messages', handleLoadMessages);\n//       socket.off('receive_message', handleReceiveMessage);\n//       socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\n//     };\n//   }, [conversationId, adminUser]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     const trimmedMessage = newMessage.trim();\n//     if (trimmedMessage === '' || !adminUser) return;\n\n//     // conversationId'den alıcı ve araç ID'sini çıkar\n//     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\n//     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\n//     if (!userIdPart) return;\n\n//     const receiver_id = parseInt(userIdPart.split('_')[1]);\n//     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: adminUser.id,\n//       receiver_id,\n//       vehicle_id,\n//       message: trimmedMessage,\n//     };\n\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   // === YENİ: MESAJ SİLME FONKSİYONU ===\n//   const handleDeleteMessage = async (messageId) => {\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n//         try {\n//             const token = localStorage.getItem('token');\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n//                 headers: { 'Authorization': `Bearer ${token}` }\n//             });\n//             // Arayüzden anında kaldırma işlemi artık backend'den gelen \n//             // 'message_deleted' socket olayı ile yapılıyor.\n//         } catch (error) {\n//             console.error(\"Mesaj silinemedi:\", error);\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n//         }\n//     }\n//   };\n\n//   if (!conversationId) {\n//     return (\n//       <div className=\"admin-chat-box-empty\">\n//         <p>Görüntülemek için bir konuşma seçin.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"admin-chat-box\">\n//       <div className=\"chat-messages-admin\">\n//         {messages.map((msg) => {\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n//           return (\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n//                 {/* === YENİ: SİLME BUTONU === \n//                     Admin her mesajı (hem kendi hem kullanıcı) silebilir */}\n//                 <button \n//                     className=\"delete-message-btn\" \n//                     onClick={() => handleDeleteMessage(msg.id)}\n//                     title=\"Mesajı Sil\"\n//                 >\n//                     ×\n//                 </button>\n//                 <p>{msg.message}</p>\n//                 <span className=\"message-time\">\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n//                 </span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//         <div ref={messagesEndRef} />\n//       </div>\n\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Cevabınızı yazın...\"\n//         />\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\n//           ➢\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default AdminChatBox;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios'; // <-- Gerekli import eklendi\nimport './AdminChatBox.css';\nimport { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminChatBox({\n  conversationId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [adminUser, setAdminUser] = useState(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        setAdminUser(jwtDecode(token));\n      } catch (error) {\n        console.error(\"Admin token decode error:\", error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (!conversationId || !adminUser) return;\n\n    // Bağlantıyı manuel olarak başlat\n    socket.connect();\n    function onConnect() {\n      console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\n      socket.emit('join_room', conversationId);\n    }\n    function handleLoadMessages(loadedMessages) {\n      setMessages(loadedMessages);\n    }\n    function handleReceiveMessage(message) {\n      if (message.conversation_id === conversationId) {\n        setMessages(prev => [...prev, message]);\n      }\n    }\n\n    // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\n    function handleMessageDeleted({\n      messageId\n    }) {\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n    }\n\n    // Listener'ları ekle\n    socket.on('connect', onConnect);\n    socket.on('load_messages', handleLoadMessages);\n    socket.on('receive_message', handleReceiveMessage);\n    socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\n\n    // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\n    if (socket.connected) {\n      onConnect();\n    }\n\n    // Component'tan çıkıldığında temizlik yap\n    return () => {\n      socket.off('connect', onConnect);\n      socket.off('load_messages', handleLoadMessages);\n      socket.off('receive_message', handleReceiveMessage);\n      socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\n    };\n  }, [conversationId, adminUser]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const trimmedMessage = newMessage.trim();\n    if (trimmedMessage === '' || !adminUser) return;\n\n    // conversationId'den alıcı ve araç ID'sini çıkar\n    const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\n    const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\n    if (!userIdPart) return;\n    const receiver_id = parseInt(userIdPart.split('_')[1]);\n    const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\n    const messageData = {\n      conversation_id: conversationId,\n      sender_id: adminUser.id,\n      receiver_id,\n      vehicle_id,\n      message: trimmedMessage\n    };\n    socket.emit('send_message', messageData);\n    setNewMessage('');\n  };\n\n  // === YENİ: MESAJ SİLME FONKSİYONU ===\n  const handleDeleteMessage = async messageId => {\n    if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        // Arayüzden anında kaldırma işlemi artık backend'den gelen \n        // 'message_deleted' socket olayı ile yapılıyor.\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error(\"Mesaj silinemedi:\", error);\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Mesaj silinirken bir hata oluştu.\");\n      }\n    }\n  };\n  if (!conversationId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-chat-box-empty\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\\xF6r\\xFCnt\\xFClemek i\\xE7in bir konu\\u015Fma se\\xE7in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages-admin\",\n      children: [messages.map(msg => {\n        const isAdminMessage = parseInt(msg.sender_id) === (adminUser === null || adminUser === void 0 ? void 0 : adminUser.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-message-btn\",\n              onClick: () => handleDeleteMessage(msg.id),\n              title: \"Mesaj\\u0131 Sil\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: new Date(msg.created_at).toLocaleTimeString('tr-TR', {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input-form-admin\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Cevab\\u0131n\\u0131z\\u0131 yaz\\u0131n...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !newMessage.trim(),\n        children: \"\\u27A2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminChatBox, \"3gAwUB0tjPPd2I8/jUDeerMNEgU=\");\n_c = AdminChatBox;\nexport default AdminChatBox;\nvar _c;\n$RefreshReg$(_c, \"AdminChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jwtDecode","axios","socket","jsxDEV","_jsxDEV","AdminChatBox","conversationId","_s","messages","setMessages","newMessage","setNewMessage","adminUser","setAdminUser","messagesEndRef","token","localStorage","getItem","error","console","connect","onConnect","log","emit","handleLoadMessages","loadedMessages","handleReceiveMessage","message","conversation_id","prev","handleMessageDeleted","messageId","prevMessages","filter","msg","id","on","connected","off","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trimmedMessage","trim","userIdPart","split","find","p","startsWith","vehicleIdPart","receiver_id","parseInt","vehicle_id","messageData","sender_id","handleDeleteMessage","window","confirm","delete","headers","_error$response","_error$response$data","alert","response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isAdminMessage","onClick","title","Date","created_at","toLocaleTimeString","hour","minute","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminChatBox.js"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import './AdminChatBox.css';\r\n\r\n// // const socket = io('http://localhost:5000');\r\n\r\n// // function AdminChatBox({ conversationId }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [adminUser, setAdminUser] = useState(null);\r\n// //   const [conversationInfo, setConversationInfo] = useState({});\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       try {\r\n// //         const decoded = jwtDecode(token);\r\n// //         setAdminUser(decoded);\r\n// //       } catch (error) {\r\n// //         console.error(\"Admin token decode error:\", error);\r\n// //       }\r\n// //     }\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     // Sadece conversationId değiştiğinde çalış\r\n// //     if (conversationId && adminUser) {\r\n// //       const parts = conversationId.split('-');\r\n// //       const userIdPart = parts.find(p => p.startsWith('user_'));\r\n// //       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\r\n      \r\n// //       const userId = userIdPart ? userIdPart.split('_')[1] : null;\r\n// //       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\r\n// //       setConversationInfo({ userId, vehicleId });\r\n\r\n// //       socket.emit('join_room', conversationId);\r\n\r\n// //       const handleLoadMessages = (loadedMessages) => {\r\n// //         setMessages(loadedMessages);\r\n// //       };\r\n\r\n// //       const handleReceiveMessage = (message) => {\r\n// //         // Sadece mevcut sohbetimize aitse mesajı ekle\r\n// //         if (message.conversation_id === conversationId) {\r\n// //             setMessages((prev) => [...prev, message]);\r\n// //         }\r\n// //       };\r\n\r\n// //       socket.on('load_messages', handleLoadMessages);\r\n// //       socket.on('receive_message', handleReceiveMessage);\r\n\r\n// //       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\r\n// //       return () => {\r\n// //         socket.off('load_messages', handleLoadMessages);\r\n// //         socket.off('receive_message', handleReceiveMessage);\r\n// //         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\r\n// //         // socket.emit('leave_room', conversationId);\r\n// //       };\r\n// //     }\r\n// //   }, [conversationId, adminUser]);\r\n\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\r\n    \r\n// //     const messageData = {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: adminUser.id,\r\n// //       receiver_id: parseInt(conversationInfo.userId),\r\n// //       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\r\n// //       message: newMessage.trim(),\r\n// //     };\r\n\r\n// //     socket.emit('send_message', messageData);\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   if (!conversationId) {\r\n// //     return (\r\n// //       <div className=\"admin-chat-box-empty\">\r\n// //         <p>Görüntülemek için bir konuşma seçin.</p>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"admin-chat-box\">\r\n// //       <div className=\"chat-messages-admin\">\r\n// //         {messages.map((msg, index) => {\r\n// //           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n// //           return (\r\n// //             <div\r\n// //               key={msg.id || index}\r\n// //               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\r\n// //             >\r\n// //               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n// //                 <p>{msg.message}</p>\r\n// //                 <span className=\"message-time\">\r\n// //                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n// //                 </span>\r\n// //               </div>\r\n// //             </div>\r\n// //           );\r\n// //         })}\r\n// //         <div ref={messagesEndRef} />\r\n// //       </div>\r\n      \r\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={newMessage}\r\n// //           onChange={(e) => setNewMessage(e.target.value)}\r\n// //           placeholder=\"Cevabınızı yazın...\"\r\n// //         />\r\n// //         <button type=\"submit\" disabled={!newMessage.trim()}>\r\n// //           ➢\r\n// //         </button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminChatBox;\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import axios from 'axios'; // <-- Gerekli import eklendi\r\n// import './AdminChatBox.css';\r\n// import { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\r\n\r\n// function AdminChatBox({ conversationId }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [adminUser, setAdminUser] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try {\r\n//         setAdminUser(jwtDecode(token));\r\n//       } catch (error) {\r\n//         console.error(\"Admin token decode error:\", error);\r\n//       }\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!conversationId || !adminUser) return;\r\n    \r\n//     // Bağlantıyı manuel olarak başlat\r\n//     socket.connect();\r\n\r\n//     function onConnect() {\r\n//         console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\r\n//         socket.emit('join_room', conversationId);\r\n//     }\r\n    \r\n//     function handleLoadMessages(loadedMessages) {\r\n//       setMessages(loadedMessages);\r\n//     }\r\n\r\n//     function handleReceiveMessage(message) {\r\n//       if (message.conversation_id === conversationId) {\r\n//         setMessages((prev) => [...prev, message]);\r\n//       }\r\n//     }\r\n    \r\n//     // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\r\n//     function handleMessageDeleted({ messageId }) {\r\n//         setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\r\n//     }\r\n\r\n//     // Listener'ları ekle\r\n//     socket.on('connect', onConnect);\r\n//     socket.on('load_messages', handleLoadMessages);\r\n//     socket.on('receive_message', handleReceiveMessage);\r\n//     socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\r\n\r\n//     // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\r\n//     if (socket.connected) {\r\n//         onConnect();\r\n//     }\r\n\r\n//     // Component'tan çıkıldığında temizlik yap\r\n//     return () => {\r\n//       socket.off('connect', onConnect);\r\n//       socket.off('load_messages', handleLoadMessages);\r\n//       socket.off('receive_message', handleReceiveMessage);\r\n//       socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\r\n//     };\r\n//   }, [conversationId, adminUser]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     const trimmedMessage = newMessage.trim();\r\n//     if (trimmedMessage === '' || !adminUser) return;\r\n    \r\n//     // conversationId'den alıcı ve araç ID'sini çıkar\r\n//     const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\r\n//     const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\r\n//     if (!userIdPart) return;\r\n\r\n//     const receiver_id = parseInt(userIdPart.split('_')[1]);\r\n//     const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\r\n\r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: adminUser.id,\r\n//       receiver_id,\r\n//       vehicle_id,\r\n//       message: trimmedMessage,\r\n//     };\r\n\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   // === YENİ: MESAJ SİLME FONKSİYONU ===\r\n//   const handleDeleteMessage = async (messageId) => {\r\n//     if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n//                 headers: { 'Authorization': `Bearer ${token}` }\r\n//             });\r\n//             // Arayüzden anında kaldırma işlemi artık backend'den gelen \r\n//             // 'message_deleted' socket olayı ile yapılıyor.\r\n//         } catch (error) {\r\n//             console.error(\"Mesaj silinemedi:\", error);\r\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   if (!conversationId) {\r\n//     return (\r\n//       <div className=\"admin-chat-box-empty\">\r\n//         <p>Görüntülemek için bir konuşma seçin.</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"admin-chat-box\">\r\n//       <div className=\"chat-messages-admin\">\r\n//         {messages.map((msg) => {\r\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n//           return (\r\n//             <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n//                 {/* === YENİ: SİLME BUTONU === \r\n//                     Admin her mesajı (hem kendi hem kullanıcı) silebilir */}\r\n//                 <button \r\n//                     className=\"delete-message-btn\" \r\n//                     onClick={() => handleDeleteMessage(msg.id)}\r\n//                     title=\"Mesajı Sil\"\r\n//                 >\r\n//                     ×\r\n//                 </button>\r\n//                 <p>{msg.message}</p>\r\n//                 <span className=\"message-time\">\r\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n//                 </span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n      \r\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newMessage}\r\n//           onChange={(e) => setNewMessage(e.target.value)}\r\n//           placeholder=\"Cevabınızı yazın...\"\r\n//         />\r\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\r\n//           ➢\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminChatBox;\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios'; // <-- Gerekli import eklendi\r\nimport './AdminChatBox.css';\r\nimport { socket } from './socket'; // <-- Merkezi socket'i kullanıyoruz\r\n\r\nfunction AdminChatBox({ conversationId }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [adminUser, setAdminUser] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        setAdminUser(jwtDecode(token));\r\n      } catch (error) {\r\n        console.error(\"Admin token decode error:\", error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!conversationId || !adminUser) return;\r\n    \r\n    // Bağlantıyı manuel olarak başlat\r\n    socket.connect();\r\n\r\n    function onConnect() {\r\n        console.log('Admin Socket Bağlandı! Odaya katılıyor:', conversationId);\r\n        socket.emit('join_room', conversationId);\r\n    }\r\n    \r\n    function handleLoadMessages(loadedMessages) {\r\n      setMessages(loadedMessages);\r\n    }\r\n\r\n    function handleReceiveMessage(message) {\r\n      if (message.conversation_id === conversationId) {\r\n        setMessages((prev) => [...prev, message]);\r\n      }\r\n    }\r\n    \r\n    // === YENİ: MESAJ SİLİNDİĞİNDE LİSTEYİ GÜNCELLE ===\r\n    function handleMessageDeleted({ messageId }) {\r\n        setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\r\n    }\r\n\r\n    // Listener'ları ekle\r\n    socket.on('connect', onConnect);\r\n    socket.on('load_messages', handleLoadMessages);\r\n    socket.on('receive_message', handleReceiveMessage);\r\n    socket.on('message_deleted', handleMessageDeleted); // <-- Yeni dinleyici eklendi\r\n\r\n    // Eğer bağlantı zaten varsa, odaya katılma isteğini hemen gönder\r\n    if (socket.connected) {\r\n        onConnect();\r\n    }\r\n\r\n    // Component'tan çıkıldığında temizlik yap\r\n    return () => {\r\n      socket.off('connect', onConnect);\r\n      socket.off('load_messages', handleLoadMessages);\r\n      socket.off('receive_message', handleReceiveMessage);\r\n      socket.off('message_deleted', handleMessageDeleted); // <-- Dinleyiciyi kaldır\r\n    };\r\n  }, [conversationId, adminUser]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const trimmedMessage = newMessage.trim();\r\n    if (trimmedMessage === '' || !adminUser) return;\r\n    \r\n    // conversationId'den alıcı ve araç ID'sini çıkar\r\n    const userIdPart = conversationId.split('-').find(p => p.startsWith('user_'));\r\n    const vehicleIdPart = conversationId.split('-').find(p => p.startsWith('vehicle_'));\r\n    if (!userIdPart) return;\r\n\r\n    const receiver_id = parseInt(userIdPart.split('_')[1]);\r\n    const vehicle_id = vehicleIdPart ? parseInt(vehicleIdPart.split('_')[1]) : null;\r\n\r\n    const messageData = {\r\n      conversation_id: conversationId,\r\n      sender_id: adminUser.id,\r\n      receiver_id,\r\n      vehicle_id,\r\n      message: trimmedMessage,\r\n    };\r\n\r\n    socket.emit('send_message', messageData);\r\n    setNewMessage('');\r\n  };\r\n\r\n  // === YENİ: MESAJ SİLME FONKSİYONU ===\r\n  const handleDeleteMessage = async (messageId) => {\r\n    if (window.confirm(\"Bu mesajı kalıcı olarak silmek istediğinizden emin misiniz?\")) {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n            // Arayüzden anında kaldırma işlemi artık backend'den gelen \r\n            // 'message_deleted' socket olayı ile yapılıyor.\r\n        } catch (error) {\r\n            console.error(\"Mesaj silinemedi:\", error);\r\n            alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n        }\r\n    }\r\n  };\r\n\r\n  if (!conversationId) {\r\n    return (\r\n      <div className=\"admin-chat-box-empty\">\r\n        <p>Görüntülemek için bir konuşma seçin.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin-chat-box\">\r\n      <div className=\"chat-messages-admin\">\r\n        {messages.map((msg) => {\r\n          const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n          return (\r\n            <div key={msg.id} className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}>\r\n              <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n                {/* === YENİ: SİLME BUTONU === \r\n                    Admin her mesajı (hem kendi hem kullanıcı) silebilir */}\r\n                <button \r\n                    className=\"delete-message-btn\" \r\n                    onClick={() => handleDeleteMessage(msg.id)}\r\n                    title=\"Mesajı Sil\"\r\n                >\r\n                    ×\r\n                </button>\r\n                <p>{msg.message}</p>\r\n                <span className=\"message-time\">\r\n                  {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Cevabınızı yazın...\"\r\n        />\r\n        <button type=\"submit\" disabled={!newMessage.trim()}>\r\n          ➢\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminChatBox;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAO,oBAAoB;AAC3B,SAASC,MAAM,QAAQ,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,YAAYA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMiB,cAAc,GAAGf,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACd,MAAMiB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI;QACFF,YAAY,CAACb,SAAS,CAACe,KAAK,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAENpB,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,cAAc,IAAI,CAACM,SAAS,EAAE;;IAEnC;IACAV,MAAM,CAACkB,OAAO,CAAC,CAAC;IAEhB,SAASC,SAASA,CAAA,EAAG;MACjBF,OAAO,CAACG,GAAG,CAAC,yCAAyC,EAAEhB,cAAc,CAAC;MACtEJ,MAAM,CAACqB,IAAI,CAAC,WAAW,EAAEjB,cAAc,CAAC;IAC5C;IAEA,SAASkB,kBAAkBA,CAACC,cAAc,EAAE;MAC1ChB,WAAW,CAACgB,cAAc,CAAC;IAC7B;IAEA,SAASC,oBAAoBA,CAACC,OAAO,EAAE;MACrC,IAAIA,OAAO,CAACC,eAAe,KAAKtB,cAAc,EAAE;QAC9CG,WAAW,CAAEoB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEF,OAAO,CAAC,CAAC;MAC3C;IACF;;IAEA;IACA,SAASG,oBAAoBA,CAAC;MAAEC;IAAU,CAAC,EAAE;MACzCtB,WAAW,CAAEuB,YAAY,IAAKA,YAAY,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,SAAS,CAAC,CAAC;IACnF;;IAEA;IACA7B,MAAM,CAACkC,EAAE,CAAC,SAAS,EAAEf,SAAS,CAAC;IAC/BnB,MAAM,CAACkC,EAAE,CAAC,eAAe,EAAEZ,kBAAkB,CAAC;IAC9CtB,MAAM,CAACkC,EAAE,CAAC,iBAAiB,EAAEV,oBAAoB,CAAC;IAClDxB,MAAM,CAACkC,EAAE,CAAC,iBAAiB,EAAEN,oBAAoB,CAAC,CAAC,CAAC;;IAEpD;IACA,IAAI5B,MAAM,CAACmC,SAAS,EAAE;MAClBhB,SAAS,CAAC,CAAC;IACf;;IAEA;IACA,OAAO,MAAM;MACXnB,MAAM,CAACoC,GAAG,CAAC,SAAS,EAAEjB,SAAS,CAAC;MAChCnB,MAAM,CAACoC,GAAG,CAAC,eAAe,EAAEd,kBAAkB,CAAC;MAC/CtB,MAAM,CAACoC,GAAG,CAAC,iBAAiB,EAAEZ,oBAAoB,CAAC;MACnDxB,MAAM,CAACoC,GAAG,CAAC,iBAAiB,EAAER,oBAAoB,CAAC,CAAC,CAAC;IACvD,CAAC;EACH,CAAC,EAAE,CAACxB,cAAc,EAAEM,SAAS,CAAC,CAAC;EAE/Bd,SAAS,CAAC,MAAM;IAAA,IAAAyC,qBAAA;IACd,CAAAA,qBAAA,GAAAzB,cAAc,CAAC0B,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAClC,QAAQ,CAAC,CAAC;EAEd,MAAMmC,iBAAiB,GAAIC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,cAAc,GAAGpC,UAAU,CAACqC,IAAI,CAAC,CAAC;IACxC,IAAID,cAAc,KAAK,EAAE,IAAI,CAAClC,SAAS,EAAE;;IAEzC;IACA,MAAMoC,UAAU,GAAG1C,cAAc,CAAC2C,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC7E,MAAMC,aAAa,GAAG/C,cAAc,CAAC2C,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,UAAU,CAAC,CAAC;IACnF,IAAI,CAACJ,UAAU,EAAE;IAEjB,MAAMM,WAAW,GAAGC,QAAQ,CAACP,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,MAAMO,UAAU,GAAGH,aAAa,GAAGE,QAAQ,CAACF,aAAa,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IAE/E,MAAMQ,WAAW,GAAG;MAClB7B,eAAe,EAAEtB,cAAc;MAC/BoD,SAAS,EAAE9C,SAAS,CAACuB,EAAE;MACvBmB,WAAW;MACXE,UAAU;MACV7B,OAAO,EAAEmB;IACX,CAAC;IAED5C,MAAM,CAACqB,IAAI,CAAC,cAAc,EAAEkC,WAAW,CAAC;IACxC9C,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;;EAED;EACA,MAAMgD,mBAAmB,GAAG,MAAO5B,SAAS,IAAK;IAC/C,IAAI6B,MAAM,CAACC,OAAO,CAAC,6DAA6D,CAAC,EAAE;MAC/E,IAAI;QACA,MAAM9C,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMhB,KAAK,CAAC6D,MAAM,CAAC,sCAAsC/B,SAAS,EAAE,EAAE;UAClEgC,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUhD,KAAK;UAAG;QAClD,CAAC,CAAC;QACF;QACA;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QAAA,IAAA8C,eAAA,EAAAC,oBAAA;QACZ9C,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzCgD,KAAK,CAAC,EAAAF,eAAA,GAAA9C,KAAK,CAACiD,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBtC,OAAO,KAAI,mCAAmC,CAAC;MAC/E;IACJ;EACF,CAAC;EAED,IAAI,CAACrB,cAAc,EAAE;IACnB,oBACEF,OAAA;MAAKiE,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACnClE,OAAA;QAAAkE,QAAA,EAAG;MAAoC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAEV;EAEA,oBACEtE,OAAA;IAAKiE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BlE,OAAA;MAAKiE,SAAS,EAAC,qBAAqB;MAAAC,QAAA,GACjC9D,QAAQ,CAACmE,GAAG,CAAEzC,GAAG,IAAK;QACrB,MAAM0C,cAAc,GAAGrB,QAAQ,CAACrB,GAAG,CAACwB,SAAS,CAAC,MAAK9C,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEuB,EAAE;QAChE,oBACE/B,OAAA;UAAkBiE,SAAS,EAAE,qBAAqBO,cAAc,GAAG,eAAe,GAAG,cAAc,EAAG;UAAAN,QAAA,eACpGlE,OAAA;YAAKiE,SAAS,EAAE,kBAAkBO,cAAc,GAAG,cAAc,GAAG,aAAa,EAAG;YAAAN,QAAA,gBAGlFlE,OAAA;cACIiE,SAAS,EAAC,oBAAoB;cAC9BQ,OAAO,EAAEA,CAAA,KAAMlB,mBAAmB,CAACzB,GAAG,CAACC,EAAE,CAAE;cAC3C2C,KAAK,EAAC,iBAAY;cAAAR,QAAA,EACrB;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTtE,OAAA;cAAAkE,QAAA,EAAIpC,GAAG,CAACP;YAAO;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBtE,OAAA;cAAMiE,SAAS,EAAC,cAAc;cAAAC,QAAA,EAC3B,IAAIS,IAAI,CAAC7C,GAAG,CAAC8C,UAAU,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC,MAAM,EAAE;cAAU,CAAC;YAAC;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ;QAAC,GAfExC,GAAG,CAACC,EAAE;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBX,CAAC;MAEV,CAAC,CAAC,eACFtE,OAAA;QAAKgF,GAAG,EAAEtE;MAAe;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eAENtE,OAAA;MAAMiE,SAAS,EAAC,uBAAuB;MAACgB,QAAQ,EAAE1C,iBAAkB;MAAA2B,QAAA,gBAClElE,OAAA;QACEkF,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7E,UAAW;QAClB8E,QAAQ,EAAG5C,CAAC,IAAKjC,aAAa,CAACiC,CAAC,CAAC6C,MAAM,CAACF,KAAK,CAAE;QAC/CG,WAAW,EAAC;MAAqB;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFtE,OAAA;QAAQkF,IAAI,EAAC,QAAQ;QAACK,QAAQ,EAAE,CAACjF,UAAU,CAACqC,IAAI,CAAC,CAAE;QAAAuB,QAAA,EAAC;MAEpD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACnE,EAAA,CA9JQF,YAAY;AAAAuF,EAAA,GAAZvF,YAAY;AAgKrB,eAAeA,YAAY;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\ChatModal.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import io from 'socket.io-client';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './ChatModal.css';\n\n// // // Socket bağlantısını component dışında bir kere oluşturmak daha iyidir.\n// // const socket = io('http://localhost:5000');\n\n// // function ChatModal({ vehicle, closeModal }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [currentUser, setCurrentUser] = useState(null);\n// //   const messagesEndRef = useRef(null);\n\n// //   // Component mount olduğunda kullanıcı bilgisini al\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       try {\n// //         const decoded = jwtDecode(token);\n// //         setCurrentUser(decoded);\n// //       } catch (e) {\n// //         console.error(\"Geçersiz Token:\", e);\n// //         closeModal(); // Hatalı token varsa modal'ı kapat\n// //       }\n// //     }\n// //   }, [closeModal]);\n\n// //   // Sohbet odası kimliğini oluştur\n// //   // Not: Admin ID'sini gelecekte dinamik hale getirebiliriz. Şimdilik 1 varsayıyoruz.\n// //   const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\n\n// //   useEffect(() => {\n// //     // Sadece conversationId hazır olduğunda socket işlemlerini yap\n// //     if (conversationId) {\n// //       console.log(`[Sohbet Arayüzü] ${conversationId} odasına katılınıyor...`);\n// //       socket.emit('join_room', conversationId);\n\n// //       const handleLoadMessages = (loadedMessages) => {\n// //         console.log(`[Sohbet Arayüzü] ${loadedMessages.length} adet geçmiş mesaj yüklendi.`);\n// //         setMessages(loadedMessages);\n// //       };\n\n// //       const handleReceiveMessage = (message) => {\n// //         console.log('[Sohbet Arayüzü] Yeni mesaj alındı:', message);\n// //         setMessages((prevMessages) => [...prevMessages, message]);\n// //       };\n\n// //       socket.on('load_messages', handleLoadMessages);\n// //       socket.on('receive_message', handleReceiveMessage);\n\n// //       // Component unmount olduğunda (kapandığında) listener'ları temizle\n// //       return () => {\n// //         console.log(`[Sohbet Arayüzü] Listener'lar temizleniyor.`);\n// //         socket.off('load_messages', handleLoadMessages);\n// //         socket.off('receive_message', handleReceiveMessage);\n// //       };\n// //     }\n// //   }, [conversationId]);\n\n// //   // Her yeni mesaj geldiğinde en alta kaydır\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     if (newMessage.trim() === '' || !currentUser || !conversationId) return;\n\n// //     const messageData = {\n// //       conversation_id: conversationId,\n// //       sender_id: currentUser.id,\n// //       receiver_id: 1, // Admin'in ID'si\n// //       vehicle_id: vehicle.id,\n// //       message: newMessage,\n// //     };\n\n// //     console.log('[Sohbet Arayüzü] Mesaj gönderiliyor:', messageData);\n// //     socket.emit('send_message', messageData);\n// //     setNewMessage('');\n// //   };\n\n// //   return (\n// //     <div className=\"chat-modal-overlay\" onClick={closeModal}>\n// //       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\n// //         <div className=\"chat-header\">\n// //           <h3>{vehicle.brand} {vehicle.model}</h3>\n// //           <span>Satıcı ile Mesajlaşma</span>\n// //           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\n// //         </div>\n// //         <div className=\"chat-messages\">\n// //           {messages.map((msg, index) => (\n// //             <div\n// //   key={msg.id}\n// //   className={`message-bubble ${msg.sender_id === currentUser?.id ? 'sent' : 'received'}`}\n// // >\n// //               <p>{msg.message}</p>\n// //               <span className=\"message-time\">\n// //                 {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n// //               </span>\n// //             </div>\n// //           ))}\n// //           <div ref={messagesEndRef} />\n// //         </div>\n// //         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\n// //           <input\n// //             type=\"text\"\n// //             value={newMessage}\n// //             onChange={(e) => setNewMessage(e.target.value)}\n// //             placeholder=\"Mesajınızı yazın...\"\n// //             disabled={!currentUser} // Kullanıcı bilgisi yüklenene kadar input'u kilitle\n// //           />\n// //           <button type=\"submit\" disabled={!currentUser}>Gönder</button>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default ChatModal;\n// import React, { useState, useEffect, useRef } from 'react';\n// import io from 'socket.io-client';\n// import { jwtDecode } from 'jwt-decode';\n// import './ChatModal.css';\n\n// const socket = io('http://localhost:5000');\n\n// function ChatModal({ vehicle, closeModal }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try {\n//         const decoded = jwtDecode(token);\n//         setCurrentUser(decoded);\n//       } catch (e) {\n//         console.error(\"Geçersiz Token:\", e);\n//         closeModal();\n//       }\n//     }\n//   }, [closeModal]);\n\n//   const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\n\n//   useEffect(() => {\n//     if (conversationId && currentUser) {\n//       console.log(`[Kullanıcı Sohbet] ${conversationId} odasına katılınıyor...`);\n\n//       // Önceki bağlantıları temizle\n//       socket.off('load_messages');\n//       socket.off('receive_message');\n\n//       socket.emit('join_room', conversationId);\n\n//       const handleLoadMessages = (loadedMessages) => {\n//         console.log(`[Kullanıcı Sohbet] ${loadedMessages.length} adet geçmiş mesaj yüklendi.`);\n//         setMessages(loadedMessages);\n//       };\n\n//       const handleReceiveMessage = (message) => {\n//         console.log('[Kullanıcı Sohbet] Yeni mesaj alındı:', message);\n//         setMessages((prevMessages) => [...prevMessages, message]);\n//       };\n\n//       socket.on('load_messages', handleLoadMessages);\n//       socket.on('receive_message', handleReceiveMessage);\n\n//       return () => {\n//         console.log(`[Kullanıcı Sohbet] Listener'lar temizleniyor.`);\n//         socket.off('load_messages', handleLoadMessages);\n//         socket.off('receive_message', handleReceiveMessage);\n//         socket.emit('leave_room', conversationId);\n//       };\n//     }\n//   }, [conversationId, currentUser]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     if (newMessage.trim() === '' || !currentUser || !conversationId) return;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: currentUser.id,\n//       receiver_id: 1, // Admin'in ID'si\n//       vehicle_id: vehicle.id,\n//       message: newMessage,\n//     };\n\n//     console.log('[Kullanıcı Sohbet] Mesaj gönderiliyor:', messageData);\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-modal-overlay\" onClick={closeModal}>\n//       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\n//         <div className=\"chat-header\">\n//           <div className=\"chat-header-info\">\n//             <h3>{vehicle.brand} {vehicle.model}</h3>\n//             <span>Satıcı ile Mesajlaşma</span>\n//           </div>\n//           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\n//         </div>\n\n//         <div className=\"chat-messages\">\n//           {messages.map((msg, index) => (\n//             <div\n//               key={msg.id || index}\n//               className={`message-bubble ${msg.sender_id === currentUser?.id ? 'sent' : 'received'}`}\n//             >\n//               <p>{msg.message}</p>\n//               <span className=\"message-time\">\n//                 {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n//               </span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\n//           <input\n//             type=\"text\"\n//             value={newMessage}\n//             onChange={(e) => setNewMessage(e.target.value)}\n//             placeholder=\"Mesajınızı yazın...\"\n//             disabled={!currentUser}\n//           />\n//           <button type=\"submit\" disabled={!currentUser}>Gönder</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ChatModal;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport './ChatModal.css';\nimport { socket } from './socket'; // <-- Merkezi socket'i import ediyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatModal({\n  vehicle,\n  closeModal\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    // Kullanıcı bilgisini token'dan al\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        setCurrentUser(jwtDecode(token));\n      } catch (e) {\n        console.error(\"Geçersiz Token:\", e);\n        closeModal();\n      }\n    }\n  }, [closeModal]);\n  const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\n  useEffect(() => {\n    if (!conversationId) return;\n\n    // Bağlantıyı başlat\n    socket.connect();\n    function onConnect() {\n      console.log('Kullanıcı Socket Bağlandı! Odaya katılıyor:', conversationId);\n      socket.emit('join_room', conversationId);\n    }\n    function onReceiveMessage(message) {\n      if (message.conversation_id === conversationId) {\n        setMessages(prev => [...prev, message]);\n      }\n    }\n    function onLoadMessages(loadedMessages) {\n      setMessages(loadedMessages);\n    }\n    socket.on('connect', onConnect);\n    socket.on('receive_message', onReceiveMessage);\n    socket.on('load_messages', onLoadMessages);\n    if (socket.connected) {\n      onConnect();\n    }\n    return () => {\n      console.log('ChatModal temizleniyor, listenerlar kaldırılıyor.');\n      socket.off('connect', onConnect);\n      socket.off('receive_message', onReceiveMessage);\n      socket.off('load_messages', onLoadMessages);\n      // Kullanıcı sohbeti kapattığında bağlantıyı sonlandırıyoruz.\n      socket.disconnect();\n    };\n  }, [conversationId]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const trimmedMessage = newMessage.trim();\n    if (trimmedMessage === '' || !currentUser || !conversationId) return;\n    const messageData = {\n      conversation_id: conversationId,\n      sender_id: currentUser.id,\n      receiver_id: 1,\n      // Admin'in ID'si (varsayılan)\n      vehicle_id: vehicle.id,\n      message: trimmedMessage\n    };\n    socket.emit('send_message', messageData);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-modal-overlay\",\n    onClick: closeModal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [vehicle.brand, \" \", vehicle.model]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Sat\\u0131c\\u0131 ile Mesajla\\u015Fma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeModal,\n          className: \"close-chat-btn\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-bubble ${parseInt(msg.sender_id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: new Date(msg.created_at).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this)]\n        }, msg.id || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-input-form\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Mesaj\\u0131n\\u0131z\\u0131 yaz\\u0131n...\",\n          disabled: !currentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !currentUser || !newMessage.trim(),\n          children: \"G\\xF6nder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatModal, \"6DufjDdN5Qn14yafmoQ2OcC0JIY=\");\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jwtDecode","socket","jsxDEV","_jsxDEV","ChatModal","vehicle","closeModal","_s","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","messagesEndRef","token","localStorage","getItem","e","console","error","conversationId","id","connect","onConnect","log","emit","onReceiveMessage","message","conversation_id","prev","onLoadMessages","loadedMessages","on","connected","off","disconnect","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","preventDefault","trimmedMessage","trim","messageData","sender_id","receiver_id","vehicle_id","className","onClick","children","stopPropagation","brand","model","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","parseInt","Date","created_at","toLocaleTimeString","hour","minute","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/ChatModal.js"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import './ChatModal.css';\r\n\r\n// // // Socket bağlantısını component dışında bir kere oluşturmak daha iyidir.\r\n// // const socket = io('http://localhost:5000');\r\n\r\n// // function ChatModal({ vehicle, closeModal }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [currentUser, setCurrentUser] = useState(null);\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   // Component mount olduğunda kullanıcı bilgisini al\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       try {\r\n// //         const decoded = jwtDecode(token);\r\n// //         setCurrentUser(decoded);\r\n// //       } catch (e) {\r\n// //         console.error(\"Geçersiz Token:\", e);\r\n// //         closeModal(); // Hatalı token varsa modal'ı kapat\r\n// //       }\r\n// //     }\r\n// //   }, [closeModal]);\r\n\r\n// //   // Sohbet odası kimliğini oluştur\r\n// //   // Not: Admin ID'sini gelecekte dinamik hale getirebiliriz. Şimdilik 1 varsayıyoruz.\r\n// //   const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\r\n\r\n// //   useEffect(() => {\r\n// //     // Sadece conversationId hazır olduğunda socket işlemlerini yap\r\n// //     if (conversationId) {\r\n// //       console.log(`[Sohbet Arayüzü] ${conversationId} odasına katılınıyor...`);\r\n// //       socket.emit('join_room', conversationId);\r\n\r\n// //       const handleLoadMessages = (loadedMessages) => {\r\n// //         console.log(`[Sohbet Arayüzü] ${loadedMessages.length} adet geçmiş mesaj yüklendi.`);\r\n// //         setMessages(loadedMessages);\r\n// //       };\r\n\r\n// //       const handleReceiveMessage = (message) => {\r\n// //         console.log('[Sohbet Arayüzü] Yeni mesaj alındı:', message);\r\n// //         setMessages((prevMessages) => [...prevMessages, message]);\r\n// //       };\r\n\r\n// //       socket.on('load_messages', handleLoadMessages);\r\n// //       socket.on('receive_message', handleReceiveMessage);\r\n\r\n// //       // Component unmount olduğunda (kapandığında) listener'ları temizle\r\n// //       return () => {\r\n// //         console.log(`[Sohbet Arayüzü] Listener'lar temizleniyor.`);\r\n// //         socket.off('load_messages', handleLoadMessages);\r\n// //         socket.off('receive_message', handleReceiveMessage);\r\n// //       };\r\n// //     }\r\n// //   }, [conversationId]);\r\n\r\n// //   // Her yeni mesaj geldiğinde en alta kaydır\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     if (newMessage.trim() === '' || !currentUser || !conversationId) return;\r\n\r\n// //     const messageData = {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: currentUser.id,\r\n// //       receiver_id: 1, // Admin'in ID'si\r\n// //       vehicle_id: vehicle.id,\r\n// //       message: newMessage,\r\n// //     };\r\n\r\n// //     console.log('[Sohbet Arayüzü] Mesaj gönderiliyor:', messageData);\r\n// //     socket.emit('send_message', messageData);\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n// //       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n// //         <div className=\"chat-header\">\r\n// //           <h3>{vehicle.brand} {vehicle.model}</h3>\r\n// //           <span>Satıcı ile Mesajlaşma</span>\r\n// //           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n// //         </div>\r\n// //         <div className=\"chat-messages\">\r\n// //           {messages.map((msg, index) => (\r\n// //             <div\r\n// //   key={msg.id}\r\n// //   className={`message-bubble ${msg.sender_id === currentUser?.id ? 'sent' : 'received'}`}\r\n// // >\r\n// //               <p>{msg.message}</p>\r\n// //               <span className=\"message-time\">\r\n// //                 {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n// //               </span>\r\n// //             </div>\r\n// //           ))}\r\n// //           <div ref={messagesEndRef} />\r\n// //         </div>\r\n// //         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             value={newMessage}\r\n// //             onChange={(e) => setNewMessage(e.target.value)}\r\n// //             placeholder=\"Mesajınızı yazın...\"\r\n// //             disabled={!currentUser} // Kullanıcı bilgisi yüklenene kadar input'u kilitle\r\n// //           />\r\n// //           <button type=\"submit\" disabled={!currentUser}>Gönder</button>\r\n// //         </form>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default ChatModal;\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import io from 'socket.io-client';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import './ChatModal.css';\r\n\r\n// const socket = io('http://localhost:5000');\r\n\r\n// function ChatModal({ vehicle, closeModal }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try {\r\n//         const decoded = jwtDecode(token);\r\n//         setCurrentUser(decoded);\r\n//       } catch (e) {\r\n//         console.error(\"Geçersiz Token:\", e);\r\n//         closeModal();\r\n//       }\r\n//     }\r\n//   }, [closeModal]);\r\n\r\n//   const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\r\n\r\n//   useEffect(() => {\r\n//     if (conversationId && currentUser) {\r\n//       console.log(`[Kullanıcı Sohbet] ${conversationId} odasına katılınıyor...`);\r\n      \r\n//       // Önceki bağlantıları temizle\r\n//       socket.off('load_messages');\r\n//       socket.off('receive_message');\r\n      \r\n//       socket.emit('join_room', conversationId);\r\n\r\n//       const handleLoadMessages = (loadedMessages) => {\r\n//         console.log(`[Kullanıcı Sohbet] ${loadedMessages.length} adet geçmiş mesaj yüklendi.`);\r\n//         setMessages(loadedMessages);\r\n//       };\r\n\r\n//       const handleReceiveMessage = (message) => {\r\n//         console.log('[Kullanıcı Sohbet] Yeni mesaj alındı:', message);\r\n//         setMessages((prevMessages) => [...prevMessages, message]);\r\n//       };\r\n\r\n//       socket.on('load_messages', handleLoadMessages);\r\n//       socket.on('receive_message', handleReceiveMessage);\r\n\r\n//       return () => {\r\n//         console.log(`[Kullanıcı Sohbet] Listener'lar temizleniyor.`);\r\n//         socket.off('load_messages', handleLoadMessages);\r\n//         socket.off('receive_message', handleReceiveMessage);\r\n//         socket.emit('leave_room', conversationId);\r\n//       };\r\n//     }\r\n//   }, [conversationId, currentUser]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     if (newMessage.trim() === '' || !currentUser || !conversationId) return;\r\n\r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: currentUser.id,\r\n//       receiver_id: 1, // Admin'in ID'si\r\n//       vehicle_id: vehicle.id,\r\n//       message: newMessage,\r\n//     };\r\n\r\n//     console.log('[Kullanıcı Sohbet] Mesaj gönderiliyor:', messageData);\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n//       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//         <div className=\"chat-header\">\r\n//           <div className=\"chat-header-info\">\r\n//             <h3>{vehicle.brand} {vehicle.model}</h3>\r\n//             <span>Satıcı ile Mesajlaşma</span>\r\n//           </div>\r\n//           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n//         </div>\r\n        \r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((msg, index) => (\r\n//             <div\r\n//               key={msg.id || index}\r\n//               className={`message-bubble ${msg.sender_id === currentUser?.id ? 'sent' : 'received'}`}\r\n//             >\r\n//               <p>{msg.message}</p>\r\n//               <span className=\"message-time\">\r\n//                 {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n//               </span>\r\n//             </div>\r\n//           ))}\r\n//           <div ref={messagesEndRef} />\r\n//         </div>\r\n        \r\n//         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={newMessage}\r\n//             onChange={(e) => setNewMessage(e.target.value)}\r\n//             placeholder=\"Mesajınızı yazın...\"\r\n//             disabled={!currentUser}\r\n//           />\r\n//           <button type=\"submit\" disabled={!currentUser}>Gönder</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ChatModal;\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport './ChatModal.css';\r\nimport { socket } from './socket'; // <-- Merkezi socket'i import ediyoruz\r\n\r\nfunction ChatModal({ vehicle, closeModal }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Kullanıcı bilgisini token'dan al\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        setCurrentUser(jwtDecode(token));\r\n      } catch (e) {\r\n        console.error(\"Geçersiz Token:\", e);\r\n        closeModal();\r\n      }\r\n    }\r\n  }, [closeModal]);\r\n\r\n  const conversationId = currentUser ? `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}` : null;\r\n\r\n  useEffect(() => {\r\n    if (!conversationId) return;\r\n\r\n    // Bağlantıyı başlat\r\n    socket.connect();\r\n\r\n    function onConnect() {\r\n      console.log('Kullanıcı Socket Bağlandı! Odaya katılıyor:', conversationId);\r\n      socket.emit('join_room', conversationId);\r\n    }\r\n    \r\n    function onReceiveMessage(message) {\r\n      if (message.conversation_id === conversationId) {\r\n        setMessages((prev) => [...prev, message]);\r\n      }\r\n    }\r\n\r\n    function onLoadMessages(loadedMessages) {\r\n        setMessages(loadedMessages);\r\n    }\r\n\r\n    socket.on('connect', onConnect);\r\n    socket.on('receive_message', onReceiveMessage);\r\n    socket.on('load_messages', onLoadMessages);\r\n    \r\n    if (socket.connected) {\r\n      onConnect();\r\n    }\r\n\r\n    return () => {\r\n      console.log('ChatModal temizleniyor, listenerlar kaldırılıyor.');\r\n      socket.off('connect', onConnect);\r\n      socket.off('receive_message', onReceiveMessage);\r\n      socket.off('load_messages', onLoadMessages);\r\n      // Kullanıcı sohbeti kapattığında bağlantıyı sonlandırıyoruz.\r\n      socket.disconnect();\r\n    };\r\n  }, [conversationId]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const trimmedMessage = newMessage.trim();\r\n    if (trimmedMessage === '' || !currentUser || !conversationId) return;\r\n\r\n    const messageData = {\r\n      conversation_id: conversationId,\r\n      sender_id: currentUser.id,\r\n      receiver_id: 1, // Admin'in ID'si (varsayılan)\r\n      vehicle_id: vehicle.id,\r\n      message: trimmedMessage,\r\n    };\r\n\r\n    socket.emit('send_message', messageData);\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n      <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"chat-header\">\r\n          <h3>{vehicle.brand} {vehicle.model}</h3>\r\n          <span>Satıcı ile Mesajlaşma</span>\r\n          <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n        </div>\r\n        <div className=\"chat-messages\">\r\n          {messages.map((msg, index) => (\r\n            <div\r\n              key={msg.id || index}\r\n              className={`message-bubble ${parseInt(msg.sender_id) === currentUser?.id ? 'sent' : 'received'}`}\r\n            >\r\n              <p>{msg.message}</p>\r\n              <span className=\"message-time\">\r\n                {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            value={newMessage}\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n            placeholder=\"Mesajınızı yazın...\"\r\n            disabled={!currentUser}\r\n          />\r\n          <button type=\"submit\" disabled={!currentUser || !newMessage.trim()}>Gönder</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatModal;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAO,iBAAiB;AACxB,SAASC,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\AdminChatBox.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import io from 'socket.io-client';\n// import { jwtDecode } from 'jwt-decode';\n// import './AdminChatBox.css';\n\n// const socket = io('http://localhost:5000');\n\n// function AdminChatBox({ conversationId }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [adminUser, setAdminUser] = useState(null);\n//   const [conversationInfo, setConversationInfo] = useState({});\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       const decoded = jwtDecode(token);\n//       setAdminUser(decoded);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (conversationId) {\n//       // conversationId'den bilgileri ayƒ±klayalƒ±m (√∂rn: \"user_5-admin_1-vehicle_12\")\n//       const parts = conversationId.split('-');\n//       const userId = parts[0].split('_')[1];\n//       const vehicleId = parts[2].split('_')[1];\n//       setConversationInfo({ userId, vehicleId });\n\n//       socket.emit('join_room', conversationId);\n//       socket.on('load_messages', setMessages);\n//       socket.on('receive_message', (message) => {\n//         setMessages((prev) => [...prev, message]);\n//       });\n//       return () => {\n//         socket.off('load_messages');\n//         socket.off('receive_message');\n//       };\n//     }\n//   }, [conversationId]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: adminUser.id,\n//       receiver_id: parseInt(conversationInfo.userId), // Alƒ±cƒ±, konu≈ümayƒ± ba≈ülatan kullanƒ±cƒ±\n//       vehicle_id: parseInt(conversationInfo.vehicleId),\n//       message: newMessage,\n//     };\n\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   if (!conversationId) return null;\n\n//   return (\n//     <div className=\"admin-chat-box\">\n//       <div className=\"chat-messages-admin\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={msg.id || index}\n//             className={`message-bubble-admin ${msg.sender_id === adminUser?.id ? 'sent-admin' : 'received-admin'}`}\n//           >\n//             <p>{msg.message}</p>\n//             <span className=\"message-time-admin\">{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Cevabƒ±nƒ±zƒ± yazƒ±n...\"\n//         />\n//         <button type=\"submit\">‚û¢</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default AdminChatBox;\n\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import io from 'socket.io-client';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './AdminChatBox.css';\n\n// // const socket = io('http://localhost:5000');\n\n// // function AdminChatBox({ conversationId, vehicleInfo, userInfo }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [adminUser, setAdminUser] = useState(null);\n// //   const messagesEndRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       const decoded = jwtDecode(token);\n// //       setAdminUser(decoded);\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (conversationId && adminUser) {\n// //       // √ñnceki odadan √ßƒ±k\n// //       socket.emit('leave_room', conversationId);\n\n// //       // Yeni odaya katƒ±l\n// //       socket.emit('join_room', conversationId);\n\n// //       // Mesajlarƒ± temizle\n// //       setMessages([]);\n\n// //       const handleLoadMessages = (loadedMessages) => {\n// //         console.log('Mesajlar y√ºklendi:', loadedMessages);\n// //         setMessages(loadedMessages);\n// //       };\n\n// //       const handleReceiveMessage = (message) => {\n// //         console.log('Yeni mesaj alƒ±ndƒ±:', message);\n// //         setMessages((prev) => [...prev, message]);\n// //       };\n\n// //       socket.on('load_messages', handleLoadMessages);\n// //       socket.on('receive_message', handleReceiveMessage);\n\n// //       return () => {\n// //         socket.off('load_messages', handleLoadMessages);\n// //         socket.off('receive_message', handleReceiveMessage);\n// //       };\n// //     }\n// //   }, [conversationId, adminUser]);\n\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     if (newMessage.trim() === '' || !adminUser || !userInfo) return;\n\n// //     const messageData = {\n// //       conversation_id: conversationId,\n// //       sender_id: adminUser.id,\n// //       receiver_id: userInfo.user_id,\n// //       vehicle_id: vehicleInfo?.vehicle_id || null,\n// //       message: newMessage,\n// //     };\n\n// //     console.log('Admin mesaj g√∂nderiyor:', messageData);\n// //     socket.emit('send_message', messageData);\n// //     setNewMessage('');\n// //   };\n\n// //   if (!conversationId) {\n// //     return (\n// //       <div className=\"admin-chat-box-empty\">\n// //         <p>G√∂r√ºnt√ºlemek i√ßin bir konu≈üma se√ßin.</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"admin-chat-box\">\n// //       <div className=\"chat-header-admin\">\n// //         <div className=\"chat-info\">\n// //           <h3>{userInfo?.user_name || 'Kullanƒ±cƒ±'}</h3>\n// //           <span>{vehicleInfo?.brand} {vehicleInfo?.model}</span>\n// //         </div>\n// //       </div>\n\n// //       <div className=\"chat-messages-admin\">\n// //         {messages.map((msg, index) => (\n// //           <div\n// //             key={msg.id || index}\n// //             className={`message-bubble-admin ${msg.sender_id === adminUser?.id ? 'sent-admin' : 'received-admin'}`}\n// //           >\n// //             <p>{msg.message}</p>\n// //             <span className=\"message-time-admin\">\n// //               {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n// //             </span>\n// //           </div>\n// //         ))}\n// //         <div ref={messagesEndRef} />\n// //       </div>\n\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n// //         <input\n// //           type=\"text\"\n// //           value={newMessage}\n// //           onChange={(e) => setNewMessage(e.target.value)}\n// //           placeholder=\"Cevabƒ±nƒ±zƒ± yazƒ±n...\"\n// //         />\n// //         <button type=\"submit\">‚û¢</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminChatBox;\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jwtDecode } from 'jwt-decode';\nimport './AdminChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction AdminChatBox({\n  conversationId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [adminUser, setAdminUser] = useState(null);\n  const [conversationInfo, setConversationInfo] = useState({});\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decoded = jwtDecode(token);\n      setAdminUser(decoded);\n      console.log('üîç ADMIN USER:', decoded);\n    }\n  }, []);\n  useEffect(() => {\n    if (conversationId) {\n      const parts = conversationId.split('-');\n      const userId = parts[0].split('_')[1];\n      const vehicleId = parts[2] ? parts[2].split('_')[1] : null;\n      setConversationInfo({\n        userId,\n        vehicleId\n      });\n      console.log('üîç CONVERSATION INFO:', {\n        userId,\n        vehicleId,\n        conversationId\n      });\n      socket.off('load_messages');\n      socket.off('receive_message');\n      socket.emit('join_room', conversationId);\n      socket.on('load_messages', loadedMessages => {\n        console.log('üîç LOADED MESSAGES:', loadedMessages);\n        setMessages(loadedMessages);\n      });\n      socket.on('receive_message', message => {\n        console.log('üîç NEW MESSAGE:', message);\n        setMessages(prev => [...prev, message]);\n      });\n      return () => {\n        socket.off('load_messages');\n        socket.off('receive_message');\n      };\n    }\n  }, [conversationId]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\n    const messageData = {\n      conversation_id: conversationId,\n      sender_id: adminUser.id,\n      receiver_id: parseInt(conversationInfo.userId),\n      vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\n      message: newMessage.trim()\n    };\n    console.log('üîç SENDING MESSAGE:', messageData);\n    socket.emit('send_message', messageData);\n    setNewMessage('');\n  };\n  if (!conversationId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-chat-box-empty\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\\xF6r\\xFCnt\\xFClemek i\\xE7in bir konu\\u015Fma se\\xE7in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages-admin\",\n      children: [messages.map((msg, index) => {\n        const isAdminMessage = parseInt(msg.sender_id) === parseInt(adminUser === null || adminUser === void 0 ? void 0 : adminUser.id);\n        console.log('üîç MESSAGE DEBUG:', {\n          messageId: msg.id,\n          senderIdFromMsg: msg.sender_id,\n          adminIdFromToken: adminUser === null || adminUser === void 0 ? void 0 : adminUser.id,\n          isAdminMessage: isAdminMessage,\n          messageText: msg.message\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-bubble-admin ${isAdminMessage ? 'sent-admin' : 'received-admin'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              color: '#999',\n              marginBottom: '4px'\n            },\n            children: [\"DEBUG: sender_id=\", msg.sender_id, \", admin_id=\", adminUser === null || adminUser === void 0 ? void 0 : adminUser.id, \", isAdmin=\", isAdminMessage ? 'YES' : 'NO']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time-admin\",\n            children: new Date(msg.created_at).toLocaleTimeString('tr-TR', {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this)]\n        }, msg.id || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input-form-admin\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Cevab\\u0131n\\u0131z\\u0131 yaz\\u0131n...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !newMessage.trim(),\n        children: \"\\u27A2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminChatBox, \"GvY7EMwaPph/FpjORT2DpxrOmds=\");\n_c = AdminChatBox;\nexport default AdminChatBox;\nvar _c;\n$RefreshReg$(_c, \"AdminChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jwtDecode","jsxDEV","_jsxDEV","socket","AdminChatBox","conversationId","_s","messages","setMessages","newMessage","setNewMessage","adminUser","setAdminUser","conversationInfo","setConversationInfo","messagesEndRef","token","localStorage","getItem","decoded","console","log","parts","split","userId","vehicleId","off","emit","on","loadedMessages","message","prev","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","messageData","conversation_id","sender_id","id","receiver_id","parseInt","vehicle_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","isAdminMessage","messageId","senderIdFromMsg","adminIdFromToken","messageText","style","fontSize","color","marginBottom","Date","created_at","toLocaleTimeString","hour","minute","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminChatBox.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import io from 'socket.io-client';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import './AdminChatBox.css';\r\n\r\n// const socket = io('http://localhost:5000');\r\n\r\n// function AdminChatBox({ conversationId }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [adminUser, setAdminUser] = useState(null);\r\n//   const [conversationInfo, setConversationInfo] = useState({});\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       const decoded = jwtDecode(token);\r\n//       setAdminUser(decoded);\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (conversationId) {\r\n//       // conversationId'den bilgileri ayƒ±klayalƒ±m (√∂rn: \"user_5-admin_1-vehicle_12\")\r\n//       const parts = conversationId.split('-');\r\n//       const userId = parts[0].split('_')[1];\r\n//       const vehicleId = parts[2].split('_')[1];\r\n//       setConversationInfo({ userId, vehicleId });\r\n\r\n//       socket.emit('join_room', conversationId);\r\n//       socket.on('load_messages', setMessages);\r\n//       socket.on('receive_message', (message) => {\r\n//         setMessages((prev) => [...prev, message]);\r\n//       });\r\n//       return () => {\r\n//         socket.off('load_messages');\r\n//         socket.off('receive_message');\r\n//       };\r\n//     }\r\n//   }, [conversationId]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\r\n    \r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: adminUser.id,\r\n//       receiver_id: parseInt(conversationInfo.userId), // Alƒ±cƒ±, konu≈ümayƒ± ba≈ülatan kullanƒ±cƒ±\r\n//       vehicle_id: parseInt(conversationInfo.vehicleId),\r\n//       message: newMessage,\r\n//     };\r\n\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   if (!conversationId) return null;\r\n\r\n//   return (\r\n//     <div className=\"admin-chat-box\">\r\n//       <div className=\"chat-messages-admin\">\r\n//         {messages.map((msg, index) => (\r\n//           <div\r\n//             key={msg.id || index}\r\n//             className={`message-bubble-admin ${msg.sender_id === adminUser?.id ? 'sent-admin' : 'received-admin'}`}\r\n//           >\r\n//             <p>{msg.message}</p>\r\n//             <span className=\"message-time-admin\">{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\r\n//           </div>\r\n//         ))}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newMessage}\r\n//           onChange={(e) => setNewMessage(e.target.value)}\r\n//           placeholder=\"Cevabƒ±nƒ±zƒ± yazƒ±n...\"\r\n//         />\r\n//         <button type=\"submit\">‚û¢</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminChatBox;\r\n\r\n\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import './AdminChatBox.css';\r\n\r\n// // const socket = io('http://localhost:5000');\r\n\r\n// // function AdminChatBox({ conversationId, vehicleInfo, userInfo }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [adminUser, setAdminUser] = useState(null);\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (token) {\r\n// //       const decoded = jwtDecode(token);\r\n// //       setAdminUser(decoded);\r\n// //     }\r\n// //   }, []);\r\n\r\n// //   useEffect(() => {\r\n// //     if (conversationId && adminUser) {\r\n// //       // √ñnceki odadan √ßƒ±k\r\n// //       socket.emit('leave_room', conversationId);\r\n      \r\n// //       // Yeni odaya katƒ±l\r\n// //       socket.emit('join_room', conversationId);\r\n      \r\n// //       // Mesajlarƒ± temizle\r\n// //       setMessages([]);\r\n\r\n// //       const handleLoadMessages = (loadedMessages) => {\r\n// //         console.log('Mesajlar y√ºklendi:', loadedMessages);\r\n// //         setMessages(loadedMessages);\r\n// //       };\r\n\r\n// //       const handleReceiveMessage = (message) => {\r\n// //         console.log('Yeni mesaj alƒ±ndƒ±:', message);\r\n// //         setMessages((prev) => [...prev, message]);\r\n// //       };\r\n\r\n// //       socket.on('load_messages', handleLoadMessages);\r\n// //       socket.on('receive_message', handleReceiveMessage);\r\n\r\n// //       return () => {\r\n// //         socket.off('load_messages', handleLoadMessages);\r\n// //         socket.off('receive_message', handleReceiveMessage);\r\n// //       };\r\n// //     }\r\n// //   }, [conversationId, adminUser]);\r\n\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     if (newMessage.trim() === '' || !adminUser || !userInfo) return;\r\n    \r\n// //     const messageData = {\r\n// //       conversation_id: conversationId,\r\n// //       sender_id: adminUser.id,\r\n// //       receiver_id: userInfo.user_id,\r\n// //       vehicle_id: vehicleInfo?.vehicle_id || null,\r\n// //       message: newMessage,\r\n// //     };\r\n\r\n// //     console.log('Admin mesaj g√∂nderiyor:', messageData);\r\n// //     socket.emit('send_message', messageData);\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   if (!conversationId) {\r\n// //     return (\r\n// //       <div className=\"admin-chat-box-empty\">\r\n// //         <p>G√∂r√ºnt√ºlemek i√ßin bir konu≈üma se√ßin.</p>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"admin-chat-box\">\r\n// //       <div className=\"chat-header-admin\">\r\n// //         <div className=\"chat-info\">\r\n// //           <h3>{userInfo?.user_name || 'Kullanƒ±cƒ±'}</h3>\r\n// //           <span>{vehicleInfo?.brand} {vehicleInfo?.model}</span>\r\n// //         </div>\r\n// //       </div>\r\n      \r\n// //       <div className=\"chat-messages-admin\">\r\n// //         {messages.map((msg, index) => (\r\n// //           <div\r\n// //             key={msg.id || index}\r\n// //             className={`message-bubble-admin ${msg.sender_id === adminUser?.id ? 'sent-admin' : 'received-admin'}`}\r\n// //           >\r\n// //             <p>{msg.message}</p>\r\n// //             <span className=\"message-time-admin\">\r\n// //               {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n// //             </span>\r\n// //           </div>\r\n// //         ))}\r\n// //         <div ref={messagesEndRef} />\r\n// //       </div>\r\n      \r\n// //       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           value={newMessage}\r\n// //           onChange={(e) => setNewMessage(e.target.value)}\r\n// //           placeholder=\"Cevabƒ±nƒ±zƒ± yazƒ±n...\"\r\n// //         />\r\n// //         <button type=\"submit\">‚û¢</button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminChatBox;\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport './AdminChatBox.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction AdminChatBox({ conversationId }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [adminUser, setAdminUser] = useState(null);\r\n  const [conversationInfo, setConversationInfo] = useState({});\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const decoded = jwtDecode(token);\r\n      setAdminUser(decoded);\r\n      console.log('üîç ADMIN USER:', decoded);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (conversationId) {\r\n      const parts = conversationId.split('-');\r\n      const userId = parts[0].split('_')[1];\r\n      const vehicleId = parts[2] ? parts[2].split('_')[1] : null;\r\n      setConversationInfo({ userId, vehicleId });\r\n\r\n      console.log('üîç CONVERSATION INFO:', { userId, vehicleId, conversationId });\r\n\r\n      socket.off('load_messages');\r\n      socket.off('receive_message');\r\n\r\n      socket.emit('join_room', conversationId);\r\n      \r\n      socket.on('load_messages', (loadedMessages) => {\r\n        console.log('üîç LOADED MESSAGES:', loadedMessages);\r\n        setMessages(loadedMessages);\r\n      });\r\n      \r\n      socket.on('receive_message', (message) => {\r\n        console.log('üîç NEW MESSAGE:', message);\r\n        setMessages((prev) => [...prev, message]);\r\n      });\r\n\r\n      return () => {\r\n        socket.off('load_messages');\r\n        socket.off('receive_message');\r\n      };\r\n    }\r\n  }, [conversationId]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\r\n    \r\n    const messageData = {\r\n      conversation_id: conversationId,\r\n      sender_id: adminUser.id,\r\n      receiver_id: parseInt(conversationInfo.userId),\r\n      vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\r\n      message: newMessage.trim(),\r\n    };\r\n\r\n    console.log('üîç SENDING MESSAGE:', messageData);\r\n    socket.emit('send_message', messageData);\r\n    setNewMessage('');\r\n  };\r\n\r\n  if (!conversationId) {\r\n    return (\r\n      <div className=\"admin-chat-box-empty\">\r\n        <p>G√∂r√ºnt√ºlemek i√ßin bir konu≈üma se√ßin.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin-chat-box\">\r\n      <div className=\"chat-messages-admin\">\r\n        {messages.map((msg, index) => {\r\n          const isAdminMessage = parseInt(msg.sender_id) === parseInt(adminUser?.id);\r\n          \r\n          console.log('üîç MESSAGE DEBUG:', {\r\n            messageId: msg.id,\r\n            senderIdFromMsg: msg.sender_id,\r\n            adminIdFromToken: adminUser?.id,\r\n            isAdminMessage: isAdminMessage,\r\n            messageText: msg.message\r\n          });\r\n\r\n          return (\r\n            <div\r\n              key={msg.id || index}\r\n              className={`message-bubble-admin ${isAdminMessage ? 'sent-admin' : 'received-admin'}`}\r\n            >\r\n              <div style={{ fontSize: '10px', color: '#999', marginBottom: '4px' }}>\r\n                DEBUG: sender_id={msg.sender_id}, admin_id={adminUser?.id}, isAdmin={isAdminMessage ? 'YES' : 'NO'}\r\n              </div>\r\n              <p>{msg.message}</p>\r\n              <span className=\"message-time-admin\">\r\n                {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n              </span>\r\n            </div>\r\n          );\r\n        })}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Cevabƒ±nƒ±zƒ± yazƒ±n...\"\r\n        />\r\n        <button type=\"submit\" disabled={!newMessage.trim()}>‚û¢</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminChatBox;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASK,YAAYA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACxC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
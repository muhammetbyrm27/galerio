{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import io from 'socket.io-client';\n// import { jwtDecode } from 'jwt-decode';\n// import './AdminChatBox.css';\n\n// const socket = io('http://localhost:5000');\n\n// function AdminChatBox({ conversationId }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [adminUser, setAdminUser] = useState(null);\n//   const [conversationInfo, setConversationInfo] = useState({});\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try {\n//         const decoded = jwtDecode(token);\n//         setAdminUser(decoded);\n//       } catch (error) {\n//         console.error(\"Admin token decode error:\", error);\n//       }\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Sadece conversationId değiştiğinde çalış\n//     if (conversationId && adminUser) {\n//       const parts = conversationId.split('-');\n//       const userIdPart = parts.find(p => p.startsWith('user_'));\n//       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\n\n//       const userId = userIdPart ? userIdPart.split('_')[1] : null;\n//       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\n//       setConversationInfo({ userId, vehicleId });\n\n//       socket.emit('join_room', conversationId);\n\n//       const handleLoadMessages = (loadedMessages) => {\n//         setMessages(loadedMessages);\n//       };\n\n//       const handleReceiveMessage = (message) => {\n//         // Sadece mevcut sohbetimize aitse mesajı ekle\n//         if (message.conversation_id === conversationId) {\n//             setMessages((prev) => [...prev, message]);\n//         }\n//       };\n\n//       socket.on('load_messages', handleLoadMessages);\n//       socket.on('receive_message', handleReceiveMessage);\n\n//       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\n//       return () => {\n//         socket.off('load_messages', handleLoadMessages);\n//         socket.off('receive_message', handleReceiveMessage);\n//         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\n//         // socket.emit('leave_room', conversationId);\n//       };\n//     }\n//   }, [conversationId, adminUser]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: adminUser.id,\n//       receiver_id: parseInt(conversationInfo.userId),\n//       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\n//       message: newMessage.trim(),\n//     };\n\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   if (!conversationId) {\n//     return (\n//       <div className=\"admin-chat-box-empty\">\n//         <p>Görüntülemek için bir konuşma seçin.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"admin-chat-box\">\n//       <div className=\"chat-messages-admin\">\n//         {messages.map((msg, index) => {\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\n//           return (\n//             <div\n//               key={msg.id || index}\n//               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\n//             >\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\n//                 <p>{msg.message}</p>\n//                 <span className=\"message-time\">\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n//                 </span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//         <div ref={messagesEndRef} />\n//       </div>\n\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Cevabınızı yazın...\"\n//         />\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\n//           ➢\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default AdminChatBox;\napp.delete('/api/messages/:id', authenticateToken, requireAdmin, async (req, res) => {\n  const messageId = req.params.id;\n  const connection = await db.getConnection();\n  try {\n    await connection.beginTransaction();\n\n    // Silmeden önce, hangi sohbete ait olduğunu öğrenelim ki doğru odaya sinyal gönderebilelim.\n    const [msgResults] = await connection.query('SELECT conversation_id FROM messages WHERE id = ?', [messageId]);\n    if (msgResults.length === 0) {\n      await connection.rollback();\n      return res.status(404).json({\n        message: 'Silinecek mesaj bulunamadı.'\n      });\n    }\n    const {\n      conversation_id\n    } = msgResults[0];\n\n    // Mesajı veritabanından sil\n    const [deleteResult] = await connection.query('DELETE FROM messages WHERE id = ?', [messageId]);\n    if (deleteResult.affectedRows === 0) {\n      throw new Error('Mesaj silinemedi.');\n    }\n\n    // Değişikliği sohbet odasındaki herkese bildir\n    io.to(conversation_id).emit('message_deleted', {\n      messageId: parseInt(messageId)\n    });\n\n    // Admin'e konuşma listesini yenilemesi için sinyal gönder\n    io.emit('admin_refresh_conversations');\n    await connection.commit();\n    res.status(200).json({\n      message: 'Mesaj başarıyla silindi.'\n    });\n  } catch (err) {\n    await connection.rollback();\n    console.error(\"Mesaj silme hatası:\", err);\n    res.status(500).json({\n      message: 'Mesaj silinirken bir sunucu hatası oluştu.'\n    });\n  } finally {\n    connection.release();\n  }\n});","map":{"version":3,"names":["app","delete","authenticateToken","requireAdmin","req","res","messageId","params","id","connection","db","getConnection","beginTransaction","msgResults","query","length","rollback","status","json","message","conversation_id","deleteResult","affectedRows","Error","io","to","emit","parseInt","commit","err","console","error","release"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminChatBox.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import io from 'socket.io-client';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import './AdminChatBox.css';\r\n\r\n// const socket = io('http://localhost:5000');\r\n\r\n// function AdminChatBox({ conversationId }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [adminUser, setAdminUser] = useState(null);\r\n//   const [conversationInfo, setConversationInfo] = useState({});\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try {\r\n//         const decoded = jwtDecode(token);\r\n//         setAdminUser(decoded);\r\n//       } catch (error) {\r\n//         console.error(\"Admin token decode error:\", error);\r\n//       }\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Sadece conversationId değiştiğinde çalış\r\n//     if (conversationId && adminUser) {\r\n//       const parts = conversationId.split('-');\r\n//       const userIdPart = parts.find(p => p.startsWith('user_'));\r\n//       const vehicleIdPart = parts.find(p => p.startsWith('vehicle_'));\r\n      \r\n//       const userId = userIdPart ? userIdPart.split('_')[1] : null;\r\n//       const vehicleId = vehicleIdPart ? vehicleIdPart.split('_')[1] : null;\r\n//       setConversationInfo({ userId, vehicleId });\r\n\r\n//       socket.emit('join_room', conversationId);\r\n\r\n//       const handleLoadMessages = (loadedMessages) => {\r\n//         setMessages(loadedMessages);\r\n//       };\r\n\r\n//       const handleReceiveMessage = (message) => {\r\n//         // Sadece mevcut sohbetimize aitse mesajı ekle\r\n//         if (message.conversation_id === conversationId) {\r\n//             setMessages((prev) => [...prev, message]);\r\n//         }\r\n//       };\r\n\r\n//       socket.on('load_messages', handleLoadMessages);\r\n//       socket.on('receive_message', handleReceiveMessage);\r\n\r\n//       // Component unmount olduğunda veya conversationId değiştiğinde listener'ları kaldır\r\n//       return () => {\r\n//         socket.off('load_messages', handleLoadMessages);\r\n//         socket.off('receive_message', handleReceiveMessage);\r\n//         // İsteğe bağlı: odadan ayrılma eventi de eklenebilir\r\n//         // socket.emit('leave_room', conversationId);\r\n//       };\r\n//     }\r\n//   }, [conversationId, adminUser]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     if (newMessage.trim() === '' || !adminUser || !conversationInfo.userId) return;\r\n    \r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: adminUser.id,\r\n//       receiver_id: parseInt(conversationInfo.userId),\r\n//       vehicle_id: conversationInfo.vehicleId ? parseInt(conversationInfo.vehicleId) : null,\r\n//       message: newMessage.trim(),\r\n//     };\r\n\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   if (!conversationId) {\r\n//     return (\r\n//       <div className=\"admin-chat-box-empty\">\r\n//         <p>Görüntülemek için bir konuşma seçin.</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"admin-chat-box\">\r\n//       <div className=\"chat-messages-admin\">\r\n//         {messages.map((msg, index) => {\r\n//           const isAdminMessage = parseInt(msg.sender_id) === adminUser?.id;\r\n//           return (\r\n//             <div\r\n//               key={msg.id || index}\r\n//               className={`message-container ${isAdminMessage ? 'admin-message' : 'user-message'}`}\r\n//             >\r\n//               <div className={`message-bubble ${isAdminMessage ? 'admin-bubble' : 'user-bubble'}`}>\r\n//                 <p>{msg.message}</p>\r\n//                 <span className=\"message-time\">\r\n//                   {new Date(msg.created_at).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\r\n//                 </span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n      \r\n//       <form className=\"chat-input-form-admin\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newMessage}\r\n//           onChange={(e) => setNewMessage(e.target.value)}\r\n//           placeholder=\"Cevabınızı yazın...\"\r\n//         />\r\n//         <button type=\"submit\" disabled={!newMessage.trim()}>\r\n//           ➢\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminChatBox;\r\napp.delete('/api/messages/:id', authenticateToken, requireAdmin, async (req, res) => {\r\n    const messageId = req.params.id;\r\n    const connection = await db.getConnection();\r\n    try {\r\n        await connection.beginTransaction();\r\n\r\n        // Silmeden önce, hangi sohbete ait olduğunu öğrenelim ki doğru odaya sinyal gönderebilelim.\r\n        const [msgResults] = await connection.query('SELECT conversation_id FROM messages WHERE id = ?', [messageId]);\r\n        if (msgResults.length === 0) {\r\n            await connection.rollback();\r\n            return res.status(404).json({ message: 'Silinecek mesaj bulunamadı.' });\r\n        }\r\n        const { conversation_id } = msgResults[0];\r\n\r\n        // Mesajı veritabanından sil\r\n        const [deleteResult] = await connection.query('DELETE FROM messages WHERE id = ?', [messageId]);\r\n        \r\n        if (deleteResult.affectedRows === 0) {\r\n           throw new Error('Mesaj silinemedi.');\r\n        }\r\n\r\n        // Değişikliği sohbet odasındaki herkese bildir\r\n        io.to(conversation_id).emit('message_deleted', { messageId: parseInt(messageId) });\r\n        \r\n        // Admin'e konuşma listesini yenilemesi için sinyal gönder\r\n        io.emit('admin_refresh_conversations');\r\n        \r\n        await connection.commit();\r\n        res.status(200).json({ message: 'Mesaj başarıyla silindi.' });\r\n\r\n    } catch (err) {\r\n        await connection.rollback();\r\n        console.error(\"Mesaj silme hatası:\", err);\r\n        res.status(500).json({ message: 'Mesaj silinirken bir sunucu hatası oluştu.' });\r\n    } finally {\r\n        connection.release();\r\n    }\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAA,GAAG,CAACC,MAAM,CAAC,mBAAmB,EAAEC,iBAAiB,EAAEC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjF,MAAMC,SAAS,GAAGF,GAAG,CAACG,MAAM,CAACC,EAAE;EAC/B,MAAMC,UAAU,GAAG,MAAMC,EAAE,CAACC,aAAa,CAAC,CAAC;EAC3C,IAAI;IACA,MAAMF,UAAU,CAACG,gBAAgB,CAAC,CAAC;;IAEnC;IACA,MAAM,CAACC,UAAU,CAAC,GAAG,MAAMJ,UAAU,CAACK,KAAK,CAAC,mDAAmD,EAAE,CAACR,SAAS,CAAC,CAAC;IAC7G,IAAIO,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MACzB,MAAMN,UAAU,CAACO,QAAQ,CAAC,CAAC;MAC3B,OAAOX,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA8B,CAAC,CAAC;IAC3E;IACA,MAAM;MAAEC;IAAgB,CAAC,GAAGP,UAAU,CAAC,CAAC,CAAC;;IAEzC;IACA,MAAM,CAACQ,YAAY,CAAC,GAAG,MAAMZ,UAAU,CAACK,KAAK,CAAC,mCAAmC,EAAE,CAACR,SAAS,CAAC,CAAC;IAE/F,IAAIe,YAAY,CAACC,YAAY,KAAK,CAAC,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACvC;;IAEA;IACAC,EAAE,CAACC,EAAE,CAACL,eAAe,CAAC,CAACM,IAAI,CAAC,iBAAiB,EAAE;MAAEpB,SAAS,EAAEqB,QAAQ,CAACrB,SAAS;IAAE,CAAC,CAAC;;IAElF;IACAkB,EAAE,CAACE,IAAI,CAAC,6BAA6B,CAAC;IAEtC,MAAMjB,UAAU,CAACmB,MAAM,CAAC,CAAC;IACzBvB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA2B,CAAC,CAAC;EAEjE,CAAC,CAAC,OAAOU,GAAG,EAAE;IACV,MAAMpB,UAAU,CAACO,QAAQ,CAAC,CAAC;IAC3Bc,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;IACzCxB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA6C,CAAC,CAAC;EACnF,CAAC,SAAS;IACNV,UAAU,CAACuB,OAAO,CAAC,CAAC;EACxB;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
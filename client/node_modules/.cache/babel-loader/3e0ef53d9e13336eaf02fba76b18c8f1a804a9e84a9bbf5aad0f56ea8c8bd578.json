{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\ChatModal.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { jwtDecode } from 'jwt-decode';\n// // import axios from 'axios';\n// // import './ChatModal.css';\n// // import { socket } from './socket';\n\n// // function ChatModal({ vehicle, closeModal }) {\n// //   const [messages, setMessages] = useState([]);\n// //   const [newMessage, setNewMessage] = useState('');\n// //   const [currentUser, setCurrentUser] = useState(null);\n// //   const messagesEndRef = useRef(null);\n\n// //   // DAHA SAĞLAM useEffect YAPISI\n// //   useEffect(() => {\n// //     // 1. Kullanıcı kimliğini al ve doğrula\n// //     const token = localStorage.getItem('token');\n// //     if (!token) {\n// //       console.error(\"Token bulunamadı, sohbet kapatılıyor.\");\n// //       closeModal();\n// //       return; // Token yoksa işlemi hemen bitir.\n// //     }\n\n// //     let decodedUser;\n// //     try {\n// //       decodedUser = jwtDecode(token);\n// //       setCurrentUser(decodedUser); // UI'ın doğru render olması için state'i ayarla\n// //     } catch (e) {\n// //       console.error(\"Geçersiz Token:\", e);\n// //       closeModal();\n// //       return; // Hatalı token ise işlemi bitir.\n// //     }\n\n// //     // 2. Artık kullanıcıyı bildiğimize göre, socket bağlantısını kur\n// //     // const conversationId = `user_${decodedUser.id}-admin_1-vehicle_${vehicle.id}`;\n// // const conversationId = currentUser ? `user_${currentUser.id}-admin_1` : null;\n// //     socket.connect();\n\n// //     // 3. Socket olay dinleyicilerini (listeners) ayarla\n// //     function onConnect() {\n// //       socket.emit('join_room', conversationId);\n// //     }\n\n// //     function handleLoadMessages(loadedMessages) {\n// //       setMessages(loadedMessages);\n// //     }\n\n// //     function handleReceiveMessage(message) {\n// //       // Sadece bu sohbete ait mesajları ekle\n// //       if (message.conversation_id === conversationId) {\n// //         setMessages((prev) => [...prev, message]);\n// //       }\n// //     }\n\n// //     function handleMessageDeleted({ messageId }) {\n// //       setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\n// //     }\n\n// //     socket.on('connect', onConnect);\n// //     socket.on('load_messages', handleLoadMessages);\n// //     socket.on('receive_message', handleReceiveMessage);\n// //     socket.on('message_deleted', handleMessageDeleted);\n\n// //     // Eğer socket zaten bağlıysa, odaya hemen katıl\n// //     if (socket.connected) {\n// //       onConnect();\n// //     }\n\n// //     // 4. Temizleme fonksiyonu: Modal kapandığında tüm bağlantıları ve dinleyicileri kaldır\n// //     return () => {\n// //       socket.off('connect', onConnect);\n// //       socket.off('load_messages', handleLoadMessages);\n// //       socket.off('receive_message', handleReceiveMessage);\n// //       socket.off('message_deleted', handleMessageDeleted);\n// //       socket.disconnect();\n// //     };\n\n// //   // Bu effect, sadece farklı bir araç için modal açıldığında veya kapatma fonksiyonu değiştiğinde çalışır.\n// //   }, [vehicle.id, closeModal]);\n\n// //   // Mesajlar her değiştiğinde en sona kaydır\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //   }, [messages]);\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n// //     const trimmedMessage = newMessage.trim();\n// //     if (trimmedMessage === '' || !currentUser) return;\n\n// //     const messageData = {\n// //       conversation_id: `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}`,\n// //       sender_id: currentUser.id, // State'ten gelen en güncel ID\n// //       receiver_id: 1, // Admin ID'si (varsayım)\n// //       vehicle_id: vehicle.id,\n// //       message: trimmedMessage,\n// //     };\n\n// //     socket.emit('send_message', messageData);\n// //     setNewMessage('');\n// //   };\n\n// //   const handleDeleteMessage = async (messageId) => {\n// //     if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\n// //         try {\n// //             const token = localStorage.getItem('token');\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n// //                 headers: { 'Authorization': `Bearer ${token}` }\n// //             });\n// //         } catch (error) {\n// //             console.error(\"Mesaj silinemedi:\", error);\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n// //         }\n// //     }\n// //   };\n// //   return (\n// //     <div className=\"chat-modal-overlay\" onClick={closeModal}>\n// //       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\n// //         <div className=\"chat-header\">\n// //           <h3>{vehicle.brand} {vehicle.model}</h3>\n// //           <span>Satıcı ile Mesajlaşma</span>\n// //           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\n// //         </div>\n// //         <div className=\"chat-messages\">\n// //           {messages.map((msg) => {\n// //             const isSentByUser = parseInt(msg.sender_id) === currentUser?.id;\n// //             return (\n// //               <div\n// //                 key={msg.id}\n// //                 className={`message-wrapper ${isSentByUser ? 'sent' : 'received'}`}\n// //               >\n// //                 <div className=\"message-bubble\">\n// //                   {isSentByUser && (\n// //                     <button \n// //                       className=\"delete-message-btn\" \n// //                       onClick={() => handleDeleteMessage(msg.id)}\n// //                       title=\"Mesajı Sil\"\n// //                     >\n// //                       ×\n// //                     </button>\n// //                   )}\n// //                   <p>{msg.message}</p>\n// //                   <span className=\"message-time\">\n// //                     {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n// //                   </span>\n// //                 </div>\n// //               </div>\n// //             );\n// //           })}\n// //           <div ref={messagesEndRef} />\n// //         </div>\n// //         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\n// //           <input\n// //             type=\"text\"\n// //             value={newMessage}\n// //             onChange={(e) => setNewMessage(e.target.value)}\n// //             placeholder=\"Mesajınızı yazın...\"\n// //             disabled={!currentUser}\n// //           />\n// //           <button type=\"submit\" disabled={!currentUser || !newMessage.trim()}>Gönder</button>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default ChatModal;\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\n\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\n\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\n\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import axios from 'axios';\n// import './ChatModal.css';\n// import { socket } from './socket';\n\n// function ChatModal({ vehicle, closeModal }) {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState('');\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       try { setCurrentUser(jwtDecode(token)); } catch (e) { closeModal(); }\n//     } else {\n//       closeModal();\n//     }\n//   }, [closeModal]);\n\n//   const conversationId = currentUser ? `user_${currentUser.id}-vehicle_${vehicle.id}-admin_1` : null;\n\n//   useEffect(() => {\n//     if (!currentUser || !conversationId) return;\n//     if (!socket.connected) socket.connect();\n\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//         closeModal();\n//         return;\n//     }\n\n//     const onConnect = () => socket.emit('join_room', { conversationId, token });\n//     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\n//     const handleReceiveMessage = (message) => {\n//       if (message.conversation_id === conversationId) setMessages((prev) => [...prev, message]);\n//     };\n//     const handleMessageDeleted = ({ messageId }) => setMessages((prev) => prev.filter(msg => msg.id !== messageId));\n\n//     socket.on('connect', onConnect);\n//     socket.on('load_messages', handleLoadMessages);\n//     socket.on('receive_message', handleReceiveMessage);\n//     socket.on('message_deleted', handleMessageDeleted);\n\n//     if (socket.connected) onConnect();\n\n//     return () => {\n//       socket.off('connect', onConnect);\n//       socket.off('load_messages', handleLoadMessages);\n//       socket.off('receive_message', handleReceiveMessage);\n//       socket.off('message_deleted', handleMessageDeleted);\n//     };\n//   }, [currentUser, conversationId, closeModal]);\n\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n//     const trimmedMessage = newMessage.trim();\n//     if (trimmedMessage === '' || !currentUser || !conversationId) return;\n\n//     const messageData = {\n//       conversation_id: conversationId,\n//       sender_id: currentUser.id,\n//       receiver_id: 1, // Admin ID'si\n//       vehicle_id: vehicle.id,\n//       message: trimmedMessage,\n//     };\n\n//     socket.emit('send_message', messageData);\n//     setNewMessage('');\n//   };\n\n//   const handleDeleteMessage = async (messageId) => {\n//     if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\n//         try {\n//             const token = localStorage.getItem('token');\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n//                 headers: { 'Authorization': `Bearer ${token}` }\n//             });\n//         } catch (error) {\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\n//         }\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-modal-overlay\" onClick={closeModal}>\n//       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\n//         <div className=\"chat-header\">\n//           <h3>{vehicle.brand} {vehicle.model}</h3>\n//           <span>Satıcı ile Mesajlaşma</span>\n//           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\n//         </div>\n//         <div className=\"chat-messages\">\n//           {messages.map((msg) => {\n//             const isSentByUser = currentUser ? parseInt(msg.sender_id) === currentUser.id : false;\n//             return (\n//               <div key={msg.id} className={`message-wrapper ${isSentByUser ? 'sent' : 'received'}`}>\n//                 <div className=\"message-bubble\">\n//                   {isSentByUser && (\n//                     <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\n//                   )}\n//                   <p>{msg.message}</p>\n//                   <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n//                 </div>\n//               </div>\n//             );\n//           })}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\n//           <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Mesajınızı yazın...\" disabled={!currentUser} />\n//           <button type=\"submit\" disabled={!currentUser || !newMessage.trim()}>Gönder</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ChatModal;\n\n// ChatModal.js (TAM ve EKSİKSİZ KOD)\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport './ChatModal.css';\nimport { socket } from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatModal({\n  vehicle,\n  closeModal\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [adminUser, setAdminUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  const currentRoomRef = useRef(null); // Hangi room'da olduğumuzu takip etmek için\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        setCurrentUser(jwtDecode(token));\n        fetchAdminUser();\n      } catch (e) {\n        closeModal();\n      }\n    } else {\n      closeModal();\n    }\n  }, [closeModal]);\n  const fetchAdminUser = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://localhost:5000/api/admin-user', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setAdminUser(response.data);\n    } catch (error) {\n      console.error(\"Admin kullanıcı alınamadı, varsayılan ID=1 kullanılacak\");\n      setAdminUser({\n        id: 1\n      }); // Fallback\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Conversation ID'yi hesapla\n  const conversationId = currentUser && adminUser ? `user_${currentUser.id}-vehicle_${vehicle.id}-admin_${adminUser.id}` : null;\n  useEffect(() => {\n    // Eğer gerekli veriler henüz yüklenmediyse bekle\n    if (isLoading || !currentUser || !conversationId || !adminUser) return;\n    const token = localStorage.getItem('token');\n    if (!token) {\n      closeModal();\n      return;\n    }\n\n    // Socket bağlantısını sağla\n    if (!socket.connected) {\n      socket.connect();\n    }\n\n    // Önceki room'dan ayrıl\n    if (currentRoomRef.current && currentRoomRef.current !== conversationId) {\n      console.log(`🚪 Eski room'dan ayrılıyor: ${currentRoomRef.current}`);\n      socket.emit('leave_room', currentRoomRef.current);\n    }\n\n    // Yeni room'a katıl\n    console.log(`🏠 Yeni room'a katılıyor: ${conversationId}`);\n    currentRoomRef.current = conversationId;\n\n    // Mesajları temizle (yeni konuşma için)\n    setMessages([]);\n    const onConnect = () => {\n      console.log('🔗 Socket bağlandı, room\\'a katılıyor:', conversationId);\n      socket.emit('join_room', {\n        conversationId,\n        token\n      });\n    };\n    const handleLoadMessages = loadedMessages => {\n      console.log(`📨 ${loadedMessages.length} mesaj yüklendi`);\n      setMessages(loadedMessages);\n    };\n    const handleReceiveMessage = message => {\n      if (message.conversation_id === conversationId) {\n        console.log('📩 Yeni mesaj alındı:', message);\n        setMessages(prev => [...prev, message]);\n      }\n    };\n    const handleMessageDeleted = ({\n      messageId\n    }) => {\n      setMessages(prev => prev.filter(msg => msg.id !== messageId));\n    };\n\n    // Socket event'lerini dinle\n    if (socket.connected) {\n      onConnect();\n    } else {\n      socket.on('connect', onConnect);\n    }\n    socket.on('load_messages', handleLoadMessages);\n    socket.on('receive_message', handleReceiveMessage);\n    socket.on('message_deleted', handleMessageDeleted);\n\n    // Cleanup function\n    return () => {\n      socket.off('connect', onConnect);\n      socket.off('load_messages', handleLoadMessages);\n      socket.off('receive_message', handleReceiveMessage);\n      socket.off('message_deleted', handleMessageDeleted);\n    };\n  }, [currentUser, conversationId, adminUser, closeModal, isLoading]);\n\n  // Modal kapanırken room'dan ayrıl\n  useEffect(() => {\n    return () => {\n      if (currentRoomRef.current) {\n        console.log(`🚪 Modal kapanıyor, room'dan ayrılıyor: ${currentRoomRef.current}`);\n        socket.emit('leave_room', currentRoomRef.current);\n        currentRoomRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const trimmedMessage = newMessage.trim();\n    if (trimmedMessage === '' || !currentUser || !conversationId || !adminUser) return;\n    console.log('📤 Mesaj gönderiliyor:', trimmedMessage);\n    const messageData = {\n      conversation_id: conversationId,\n      sender_id: currentUser.id,\n      receiver_id: adminUser.id,\n      vehicle_id: vehicle.id,\n      message: trimmedMessage\n    };\n    socket.emit('send_message', messageData);\n    setNewMessage('');\n  };\n  const handleDeleteMessage = async messageId => {\n    if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        var _error$response, _error$response$data;\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Mesaj silinirken bir hata oluştu.\");\n      }\n    }\n  };\n\n  // Yükleme durumu\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal-overlay\",\n      onClick: closeModal,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-content\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Y\\xFCkleniyor...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeModal,\n            className: \"close-chat-btn\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Ba\\u011Flant\\u0131 kuruluyor...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-modal-overlay\",\n    onClick: closeModal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [vehicle.brand, \" \", vehicle.model]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Sat\\u0131c\\u0131 ile Mesajla\\u015Fma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeModal,\n          className: \"close-chat-btn\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map(msg => {\n          const isSentByUser = currentUser ? parseInt(msg.sender_id) === currentUser.id : false;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-wrapper ${isSentByUser ? 'sent' : 'received'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-bubble\",\n              children: [isSentByUser && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-message-btn\",\n                onClick: () => handleDeleteMessage(msg.id),\n                title: \"Mesaj\\u0131 Sil\",\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: new Date(msg.created_at).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this)\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-input-form\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Mesaj\\u0131n\\u0131z\\u0131 yaz\\u0131n...\",\n          disabled: !currentUser || isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !currentUser || !newMessage.trim() || isLoading,\n          children: \"G\\xF6nder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 489,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatModal, \"wdlpzL/B9C9uqAnUhAAI4k3NGMw=\");\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jwtDecode","axios","socket","jsxDEV","_jsxDEV","ChatModal","vehicle","closeModal","_s","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","adminUser","setAdminUser","isLoading","setIsLoading","messagesEndRef","currentRoomRef","token","localStorage","getItem","fetchAdminUser","e","response","get","headers","data","error","console","id","conversationId","connected","connect","current","log","emit","onConnect","handleLoadMessages","loadedMessages","length","handleReceiveMessage","message","conversation_id","prev","handleMessageDeleted","messageId","filter","msg","on","off","_messagesEndRef$curre","scrollIntoView","behavior","handleSendMessage","preventDefault","trimmedMessage","trim","messageData","sender_id","receiver_id","vehicle_id","handleDeleteMessage","window","confirm","delete","_error$response","_error$response$data","alert","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","brand","model","map","isSentByUser","parseInt","title","Date","created_at","toLocaleTimeString","hour","minute","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/ChatModal.js"],"sourcesContent":["\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { jwtDecode } from 'jwt-decode';\r\n// // import axios from 'axios';\r\n// // import './ChatModal.css';\r\n// // import { socket } from './socket';\r\n\r\n// // function ChatModal({ vehicle, closeModal }) {\r\n// //   const [messages, setMessages] = useState([]);\r\n// //   const [newMessage, setNewMessage] = useState('');\r\n// //   const [currentUser, setCurrentUser] = useState(null);\r\n// //   const messagesEndRef = useRef(null);\r\n\r\n// //   // DAHA SAĞLAM useEffect YAPISI\r\n// //   useEffect(() => {\r\n// //     // 1. Kullanıcı kimliğini al ve doğrula\r\n// //     const token = localStorage.getItem('token');\r\n// //     if (!token) {\r\n// //       console.error(\"Token bulunamadı, sohbet kapatılıyor.\");\r\n// //       closeModal();\r\n// //       return; // Token yoksa işlemi hemen bitir.\r\n// //     }\r\n\r\n// //     let decodedUser;\r\n// //     try {\r\n// //       decodedUser = jwtDecode(token);\r\n// //       setCurrentUser(decodedUser); // UI'ın doğru render olması için state'i ayarla\r\n// //     } catch (e) {\r\n// //       console.error(\"Geçersiz Token:\", e);\r\n// //       closeModal();\r\n// //       return; // Hatalı token ise işlemi bitir.\r\n// //     }\r\n    \r\n// //     // 2. Artık kullanıcıyı bildiğimize göre, socket bağlantısını kur\r\n// //     // const conversationId = `user_${decodedUser.id}-admin_1-vehicle_${vehicle.id}`;\r\n// // const conversationId = currentUser ? `user_${currentUser.id}-admin_1` : null;\r\n// //     socket.connect();\r\n\r\n// //     // 3. Socket olay dinleyicilerini (listeners) ayarla\r\n// //     function onConnect() {\r\n// //       socket.emit('join_room', conversationId);\r\n// //     }\r\n    \r\n// //     function handleLoadMessages(loadedMessages) {\r\n// //       setMessages(loadedMessages);\r\n// //     }\r\n\r\n// //     function handleReceiveMessage(message) {\r\n// //       // Sadece bu sohbete ait mesajları ekle\r\n// //       if (message.conversation_id === conversationId) {\r\n// //         setMessages((prev) => [...prev, message]);\r\n// //       }\r\n// //     }\r\n\r\n// //     function handleMessageDeleted({ messageId }) {\r\n// //       setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== messageId));\r\n// //     }\r\n\r\n// //     socket.on('connect', onConnect);\r\n// //     socket.on('load_messages', handleLoadMessages);\r\n// //     socket.on('receive_message', handleReceiveMessage);\r\n// //     socket.on('message_deleted', handleMessageDeleted);\r\n    \r\n// //     // Eğer socket zaten bağlıysa, odaya hemen katıl\r\n// //     if (socket.connected) {\r\n// //       onConnect();\r\n// //     }\r\n\r\n// //     // 4. Temizleme fonksiyonu: Modal kapandığında tüm bağlantıları ve dinleyicileri kaldır\r\n// //     return () => {\r\n// //       socket.off('connect', onConnect);\r\n// //       socket.off('load_messages', handleLoadMessages);\r\n// //       socket.off('receive_message', handleReceiveMessage);\r\n// //       socket.off('message_deleted', handleMessageDeleted);\r\n// //       socket.disconnect();\r\n// //     };\r\n    \r\n// //   // Bu effect, sadece farklı bir araç için modal açıldığında veya kapatma fonksiyonu değiştiğinde çalışır.\r\n// //   }, [vehicle.id, closeModal]);\r\n\r\n// //   // Mesajlar her değiştiğinde en sona kaydır\r\n// //   useEffect(() => {\r\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //   }, [messages]);\r\n\r\n// //   const handleSendMessage = (e) => {\r\n// //     e.preventDefault();\r\n// //     const trimmedMessage = newMessage.trim();\r\n// //     if (trimmedMessage === '' || !currentUser) return;\r\n\r\n// //     const messageData = {\r\n// //       conversation_id: `user_${currentUser.id}-admin_1-vehicle_${vehicle.id}`,\r\n// //       sender_id: currentUser.id, // State'ten gelen en güncel ID\r\n// //       receiver_id: 1, // Admin ID'si (varsayım)\r\n// //       vehicle_id: vehicle.id,\r\n// //       message: trimmedMessage,\r\n// //     };\r\n\r\n// //     socket.emit('send_message', messageData);\r\n// //     setNewMessage('');\r\n// //   };\r\n\r\n// //   const handleDeleteMessage = async (messageId) => {\r\n// //     if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\r\n// //         try {\r\n// //             const token = localStorage.getItem('token');\r\n// //             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n// //                 headers: { 'Authorization': `Bearer ${token}` }\r\n// //             });\r\n// //         } catch (error) {\r\n// //             console.error(\"Mesaj silinemedi:\", error);\r\n// //             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n// //         }\r\n// //     }\r\n// //   };\r\n// //   return (\r\n// //     <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n// //       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n// //         <div className=\"chat-header\">\r\n// //           <h3>{vehicle.brand} {vehicle.model}</h3>\r\n// //           <span>Satıcı ile Mesajlaşma</span>\r\n// //           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n// //         </div>\r\n// //         <div className=\"chat-messages\">\r\n// //           {messages.map((msg) => {\r\n// //             const isSentByUser = parseInt(msg.sender_id) === currentUser?.id;\r\n// //             return (\r\n// //               <div\r\n// //                 key={msg.id}\r\n// //                 className={`message-wrapper ${isSentByUser ? 'sent' : 'received'}`}\r\n// //               >\r\n// //                 <div className=\"message-bubble\">\r\n// //                   {isSentByUser && (\r\n// //                     <button \r\n// //                       className=\"delete-message-btn\" \r\n// //                       onClick={() => handleDeleteMessage(msg.id)}\r\n// //                       title=\"Mesajı Sil\"\r\n// //                     >\r\n// //                       ×\r\n// //                     </button>\r\n// //                   )}\r\n// //                   <p>{msg.message}</p>\r\n// //                   <span className=\"message-time\">\r\n// //                     {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n// //                   </span>\r\n// //                 </div>\r\n// //               </div>\r\n// //             );\r\n// //           })}\r\n// //           <div ref={messagesEndRef} />\r\n// //         </div>\r\n// //         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             value={newMessage}\r\n// //             onChange={(e) => setNewMessage(e.target.value)}\r\n// //             placeholder=\"Mesajınızı yazın...\"\r\n// //             disabled={!currentUser}\r\n// //           />\r\n// //           <button type=\"submit\" disabled={!currentUser || !newMessage.trim()}>Gönder</button>\r\n// //         </form>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default ChatModal;\r\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// // ChatModal.js (TAM ve EKSİKSİZ KOD)\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import axios from 'axios';\r\n// import './ChatModal.css';\r\n// import { socket } from './socket';\r\n\r\n// function ChatModal({ vehicle, closeModal }) {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState('');\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       try { setCurrentUser(jwtDecode(token)); } catch (e) { closeModal(); }\r\n//     } else {\r\n//       closeModal();\r\n//     }\r\n//   }, [closeModal]);\r\n\r\n//   const conversationId = currentUser ? `user_${currentUser.id}-vehicle_${vehicle.id}-admin_1` : null;\r\n\r\n//   useEffect(() => {\r\n//     if (!currentUser || !conversationId) return;\r\n//     if (!socket.connected) socket.connect();\r\n    \r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) {\r\n//         closeModal();\r\n//         return;\r\n//     }\r\n\r\n//     const onConnect = () => socket.emit('join_room', { conversationId, token });\r\n//     const handleLoadMessages = (loadedMessages) => setMessages(loadedMessages);\r\n//     const handleReceiveMessage = (message) => {\r\n//       if (message.conversation_id === conversationId) setMessages((prev) => [...prev, message]);\r\n//     };\r\n//     const handleMessageDeleted = ({ messageId }) => setMessages((prev) => prev.filter(msg => msg.id !== messageId));\r\n\r\n//     socket.on('connect', onConnect);\r\n//     socket.on('load_messages', handleLoadMessages);\r\n//     socket.on('receive_message', handleReceiveMessage);\r\n//     socket.on('message_deleted', handleMessageDeleted);\r\n    \r\n//     if (socket.connected) onConnect();\r\n\r\n//     return () => {\r\n//       socket.off('connect', onConnect);\r\n//       socket.off('load_messages', handleLoadMessages);\r\n//       socket.off('receive_message', handleReceiveMessage);\r\n//       socket.off('message_deleted', handleMessageDeleted);\r\n//     };\r\n//   }, [currentUser, conversationId, closeModal]);\r\n\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n//     const trimmedMessage = newMessage.trim();\r\n//     if (trimmedMessage === '' || !currentUser || !conversationId) return;\r\n\r\n//     const messageData = {\r\n//       conversation_id: conversationId,\r\n//       sender_id: currentUser.id,\r\n//       receiver_id: 1, // Admin ID'si\r\n//       vehicle_id: vehicle.id,\r\n//       message: trimmedMessage,\r\n//     };\r\n\r\n//     socket.emit('send_message', messageData);\r\n//     setNewMessage('');\r\n//   };\r\n\r\n//   const handleDeleteMessage = async (messageId) => {\r\n//     if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n//                 headers: { 'Authorization': `Bearer ${token}` }\r\n//             });\r\n//         } catch (error) {\r\n//             alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n//         }\r\n//     }\r\n//   };\r\n  \r\n//   return (\r\n//     <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n//       <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//         <div className=\"chat-header\">\r\n//           <h3>{vehicle.brand} {vehicle.model}</h3>\r\n//           <span>Satıcı ile Mesajlaşma</span>\r\n//           <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n//         </div>\r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((msg) => {\r\n//             const isSentByUser = currentUser ? parseInt(msg.sender_id) === currentUser.id : false;\r\n//             return (\r\n//               <div key={msg.id} className={`message-wrapper ${isSentByUser ? 'sent' : 'received'}`}>\r\n//                 <div className=\"message-bubble\">\r\n//                   {isSentByUser && (\r\n//                     <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\r\n//                   )}\r\n//                   <p>{msg.message}</p>\r\n//                   <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//           })}\r\n//           <div ref={messagesEndRef} />\r\n//         </div>\r\n//         <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n//           <input type=\"text\" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder=\"Mesajınızı yazın...\" disabled={!currentUser} />\r\n//           <button type=\"submit\" disabled={!currentUser || !newMessage.trim()}>Gönder</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ChatModal;\r\n\r\n\r\n\r\n\r\n// ChatModal.js (TAM ve EKSİKSİZ KOD)\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport './ChatModal.css';\r\nimport { socket } from './socket';\r\n\r\nfunction ChatModal({ vehicle, closeModal }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [adminUser, setAdminUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const messagesEndRef = useRef(null);\r\n  const currentRoomRef = useRef(null); // Hangi room'da olduğumuzu takip etmek için\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try { \r\n        setCurrentUser(jwtDecode(token)); \r\n        fetchAdminUser();\r\n      } catch (e) { \r\n        closeModal(); \r\n      }\r\n    } else {\r\n      closeModal();\r\n    }\r\n  }, [closeModal]);\r\n\r\n  const fetchAdminUser = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.get('http://localhost:5000/api/admin-user', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setAdminUser(response.data);\r\n    } catch (error) {\r\n      console.error(\"Admin kullanıcı alınamadı, varsayılan ID=1 kullanılacak\");\r\n      setAdminUser({ id: 1 }); // Fallback\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Conversation ID'yi hesapla\r\n  const conversationId = (currentUser && adminUser) \r\n    ? `user_${currentUser.id}-vehicle_${vehicle.id}-admin_${adminUser.id}`\r\n    : null;\r\n\r\n  useEffect(() => {\r\n    // Eğer gerekli veriler henüz yüklenmediyse bekle\r\n    if (isLoading || !currentUser || !conversationId || !adminUser) return;\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        closeModal();\r\n        return;\r\n    }\r\n\r\n    // Socket bağlantısını sağla\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n\r\n    // Önceki room'dan ayrıl\r\n    if (currentRoomRef.current && currentRoomRef.current !== conversationId) {\r\n      console.log(`🚪 Eski room'dan ayrılıyor: ${currentRoomRef.current}`);\r\n      socket.emit('leave_room', currentRoomRef.current);\r\n    }\r\n\r\n    // Yeni room'a katıl\r\n    console.log(`🏠 Yeni room'a katılıyor: ${conversationId}`);\r\n    currentRoomRef.current = conversationId;\r\n    \r\n    // Mesajları temizle (yeni konuşma için)\r\n    setMessages([]);\r\n\r\n    const onConnect = () => {\r\n        console.log('🔗 Socket bağlandı, room\\'a katılıyor:', conversationId);\r\n        socket.emit('join_room', { conversationId, token });\r\n    };\r\n\r\n    const handleLoadMessages = (loadedMessages) => {\r\n      console.log(`📨 ${loadedMessages.length} mesaj yüklendi`);\r\n      setMessages(loadedMessages);\r\n    };\r\n\r\n    const handleReceiveMessage = (message) => {\r\n      if (message.conversation_id === conversationId) {\r\n        console.log('📩 Yeni mesaj alındı:', message);\r\n        setMessages((prev) => [...prev, message]);\r\n      }\r\n    };\r\n\r\n    const handleMessageDeleted = ({ messageId }) => {\r\n      setMessages((prev) => prev.filter(msg => msg.id !== messageId));\r\n    };\r\n\r\n    // Socket event'lerini dinle\r\n    if (socket.connected) {\r\n      onConnect();\r\n    } else {\r\n      socket.on('connect', onConnect);\r\n    }\r\n    \r\n    socket.on('load_messages', handleLoadMessages);\r\n    socket.on('receive_message', handleReceiveMessage);\r\n    socket.on('message_deleted', handleMessageDeleted);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      socket.off('connect', onConnect);\r\n      socket.off('load_messages', handleLoadMessages);\r\n      socket.off('receive_message', handleReceiveMessage);\r\n      socket.off('message_deleted', handleMessageDeleted);\r\n    };\r\n  }, [currentUser, conversationId, adminUser, closeModal, isLoading]);\r\n\r\n  // Modal kapanırken room'dan ayrıl\r\n  useEffect(() => {\r\n    return () => {\r\n      if (currentRoomRef.current) {\r\n        console.log(`🚪 Modal kapanıyor, room'dan ayrılıyor: ${currentRoomRef.current}`);\r\n        socket.emit('leave_room', currentRoomRef.current);\r\n        currentRoomRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const trimmedMessage = newMessage.trim();\r\n    if (trimmedMessage === '' || !currentUser || !conversationId || !adminUser) return;\r\n\r\n    console.log('📤 Mesaj gönderiliyor:', trimmedMessage);\r\n\r\n    const messageData = {\r\n      conversation_id: conversationId,\r\n      sender_id: currentUser.id,\r\n      receiver_id: adminUser.id,\r\n      vehicle_id: vehicle.id,\r\n      message: trimmedMessage,\r\n    };\r\n\r\n    socket.emit('send_message', messageData);\r\n    setNewMessage('');\r\n  };\r\n\r\n  const handleDeleteMessage = async (messageId) => {\r\n    if (window.confirm(\"Mesajı silmek istediğinizden emin misiniz?\")) {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            await axios.delete(`http://localhost:5000/api/messages/${messageId}`, {\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n        } catch (error) {\r\n            alert(error.response?.data?.message || \"Mesaj silinirken bir hata oluştu.\");\r\n        }\r\n    }\r\n  };\r\n\r\n  // Yükleme durumu\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n        <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n          <div className=\"chat-header\">\r\n            <h3>Yükleniyor...</h3>\r\n            <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n          </div>\r\n          <div className=\"chat-messages\">\r\n            <p>Bağlantı kuruluyor...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"chat-modal-overlay\" onClick={closeModal}>\r\n      <div className=\"chat-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"chat-header\">\r\n          <h3>{vehicle.brand} {vehicle.model}</h3>\r\n          <span>Satıcı ile Mesajlaşma</span>\r\n          <button onClick={closeModal} className=\"close-chat-btn\">×</button>\r\n        </div>\r\n        <div className=\"chat-messages\">\r\n          {messages.map((msg) => {\r\n            const isSentByUser = currentUser ? parseInt(msg.sender_id) === currentUser.id : false;\r\n            return (\r\n              <div key={msg.id} className={`message-wrapper ${isSentByUser ? 'sent' : 'received'}`}>\r\n                <div className=\"message-bubble\">\r\n                  {isSentByUser && (\r\n                    <button className=\"delete-message-btn\" onClick={() => handleDeleteMessage(msg.id)} title=\"Mesajı Sil\">×</button>\r\n                  )}\r\n                  <p>{msg.message}</p>\r\n                  <span className=\"message-time\">{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n          <input \r\n            type=\"text\" \r\n            value={newMessage} \r\n            onChange={(e) => setNewMessage(e.target.value)} \r\n            placeholder=\"Mesajınızı yazın...\" \r\n            disabled={!currentUser || isLoading} \r\n          />\r\n          <button \r\n            type=\"submit\" \r\n            disabled={!currentUser || !newMessage.trim() || isLoading}\r\n          >\r\n            Gönder\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatModal;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammet\\\\Desktop\\\\galerio-app\\\\client\\\\src\\\\AdminProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminProtectedRoute = ({\n  children\n}) => {\n  const token = localStorage.getItem('token');\n\n  // 1. Token var mı diye kontrol et.\n  if (!token) {\n    // Token hiç yoksa, direkt giriş sayfasına yönlendir.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n  try {\n    // 2. Token'ın içini aç ve rolü kontrol et.\n    const decodedToken = jwtDecode(token);\n\n    // 3. Eğer token'daki rol 'admin' DEĞİLSE...\n    if (decodedToken.role !== 'admin') {\n      // Kullanıcıyı yetkisi olmayan bir sayfaya değil,\n      // kendi ana sayfasına (dashboard) yönlendir. Bu daha iyi bir kullanıcı deneyimidir.\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/dashboard\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 20\n      }, this);\n    }\n  } catch (error) {\n    // 4. Token geçersiz veya bozuksa, yine giriş sayfasına yönlendir.\n    console.error(\"Geçersiz token:\", error);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Tüm kontrollerden geçtiyse (token varsa ve rol 'admin' ise), istenen admin sayfasını göster.\n  return children;\n};\n\n// export default AdminProtectedRoute;\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import './App.css';\n\n// // KORUYUCULAR\n// import ProtectedRoute from './ProtectedRoute'; \n// import AdminProtectedRoute from './components/AdminProtectedRoute'; // Yeni admin koruyucumuzu import ediyoruz\n\n// // SAYFALAR\n// import LoginPage from './LoginPage';\n// import ForgotPasswordPage from './ForgotPasswordPage';\n\n// // KULLANICI SAYFALARI\n// import Dashboard from './Dashboard';\n// import VehiclesPage from './VehiclesPage';\n// import PersonnelPage from './PersonnelPage';\n// import CreditCalculatorPage from './CreditCalculatorPage';\n// import MarketValuePage from './MarketValuePage';\n\n// // YÖNETİCİ SAYFALARI (Örnek olarak AdminDashboard ekliyoruz)\n// // Bu sayfaları projenizde oluşturmanız gerekecek.\n// import AdminDashboard from './AdminDashboard'; \n\n// function App() {\n//   return (\n//     <Router>\n//       <Routes>\n//         {/* ======================================= */}\n//         {/*      HERKESE AÇIK ROTALAR               */}\n//         {/* ======================================= */}\n//         <Route path=\"/\" element={<LoginPage />} />\n//         <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\n\n//         {/* ======================================= */}\n//         {/*      NORMAL KULLANICI ROTALARI          */}\n//         {/* ======================================= */}\n//         {/* Bu rotalar ProtectedRoute ile korunuyor, yani sadece giriş yapmış (admin veya user) herkes görebilir. */}\n//         <Route path=\"/dashboard\" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />\n//         <Route path=\"/vehicles\" element={<ProtectedRoute><VehiclesPage /></ProtectedRoute>} />\n//         <Route path=\"/personnel\" element={<ProtectedRoute><PersonnelPage /></ProtectedRoute>} />\n//         <Route path=\"/kredi\" element={<ProtectedRoute><CreditCalculatorPage /></ProtectedRoute>} />\n//         <Route path=\"/piyasa\" element={<ProtectedRoute><MarketValuePage /></ProtectedRoute>} />\n\n//         {/* ======================================= */}\n//         {/*      YÖNETİCİYE ÖZEL ROTALAR            */}\n//         {/* ======================================= */}\n//         {/* Bu rotalar AdminProtectedRoute ile korunuyor, yani SADECE rolü 'admin' olanlar görebilir. */}\n//         <Route \n//           path=\"/admin-dashboard\" \n//           element={\n//             <AdminProtectedRoute>\n//               <AdminDashboard />\n//             </AdminProtectedRoute>\n//           } \n//         />\n//         {/* Başka admin sayfaları eklemek isterseniz, onları da buraya ekleyebilirsiniz. */}\n//         {/* Örnek:\n//         <Route \n//           path=\"/admin/user-management\" \n//           element={<AdminProtectedRoute><UserManagement /></AdminProtectedRoute>} \n//         />\n//         */}\n\n//       </Routes>\n//     </Router>\n//   );\n// }\n_c = AdminProtectedRoute;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"AdminProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","AdminProtectedRoute","children","token","localStorage","getItem","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","decodedToken","role","error","console","_c","App","$RefreshReg$"],"sources":["C:/Users/Muhammet/Desktop/galerio-app/client/src/AdminProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    // 1. Token var mı diye kontrol et.\r\n    if (!token) {\r\n        // Token hiç yoksa, direkt giriş sayfasına yönlendir.\r\n        return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    try {\r\n        // 2. Token'ın içini aç ve rolü kontrol et.\r\n        const decodedToken = jwtDecode(token);\r\n        \r\n        // 3. Eğer token'daki rol 'admin' DEĞİLSE...\r\n        if (decodedToken.role !== 'admin') {\r\n            // Kullanıcıyı yetkisi olmayan bir sayfaya değil,\r\n            // kendi ana sayfasına (dashboard) yönlendir. Bu daha iyi bir kullanıcı deneyimidir.\r\n            return <Navigate to=\"/dashboard\" replace />; \r\n        }\r\n    } catch (error) {\r\n        // 4. Token geçersiz veya bozuksa, yine giriş sayfasına yönlendir.\r\n        console.error(\"Geçersiz token:\", error);\r\n        return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    // Tüm kontrollerden geçtiyse (token varsa ve rol 'admin' ise), istenen admin sayfasını göster.\r\n    return children;\r\n};\r\n\r\n// export default AdminProtectedRoute;\r\n// import React from 'react';\r\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n// import './App.css';\r\n\r\n// // KORUYUCULAR\r\n// import ProtectedRoute from './ProtectedRoute'; \r\n// import AdminProtectedRoute from './components/AdminProtectedRoute'; // Yeni admin koruyucumuzu import ediyoruz\r\n\r\n// // SAYFALAR\r\n// import LoginPage from './LoginPage';\r\n// import ForgotPasswordPage from './ForgotPasswordPage';\r\n\r\n// // KULLANICI SAYFALARI\r\n// import Dashboard from './Dashboard';\r\n// import VehiclesPage from './VehiclesPage';\r\n// import PersonnelPage from './PersonnelPage';\r\n// import CreditCalculatorPage from './CreditCalculatorPage';\r\n// import MarketValuePage from './MarketValuePage';\r\n\r\n// // YÖNETİCİ SAYFALARI (Örnek olarak AdminDashboard ekliyoruz)\r\n// // Bu sayfaları projenizde oluşturmanız gerekecek.\r\n// import AdminDashboard from './AdminDashboard'; \r\n\r\n// function App() {\r\n//   return (\r\n//     <Router>\r\n//       <Routes>\r\n//         {/* ======================================= */}\r\n//         {/*      HERKESE AÇIK ROTALAR               */}\r\n//         {/* ======================================= */}\r\n//         <Route path=\"/\" element={<LoginPage />} />\r\n//         <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\r\n\r\n\r\n//         {/* ======================================= */}\r\n//         {/*      NORMAL KULLANICI ROTALARI          */}\r\n//         {/* ======================================= */}\r\n//         {/* Bu rotalar ProtectedRoute ile korunuyor, yani sadece giriş yapmış (admin veya user) herkes görebilir. */}\r\n//         <Route path=\"/dashboard\" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />\r\n//         <Route path=\"/vehicles\" element={<ProtectedRoute><VehiclesPage /></ProtectedRoute>} />\r\n//         <Route path=\"/personnel\" element={<ProtectedRoute><PersonnelPage /></ProtectedRoute>} />\r\n//         <Route path=\"/kredi\" element={<ProtectedRoute><CreditCalculatorPage /></ProtectedRoute>} />\r\n//         <Route path=\"/piyasa\" element={<ProtectedRoute><MarketValuePage /></ProtectedRoute>} />\r\n        \r\n\r\n//         {/* ======================================= */}\r\n//         {/*      YÖNETİCİYE ÖZEL ROTALAR            */}\r\n//         {/* ======================================= */}\r\n//         {/* Bu rotalar AdminProtectedRoute ile korunuyor, yani SADECE rolü 'admin' olanlar görebilir. */}\r\n//         <Route \r\n//           path=\"/admin-dashboard\" \r\n//           element={\r\n//             <AdminProtectedRoute>\r\n//               <AdminDashboard />\r\n//             </AdminProtectedRoute>\r\n//           } \r\n//         />\r\n//         {/* Başka admin sayfaları eklemek isterseniz, onları da buraya ekleyebilirsiniz. */}\r\n//         {/* Örnek:\r\n//         <Route \r\n//           path=\"/admin/user-management\" \r\n//           element={<AdminProtectedRoute><UserManagement /></AdminProtectedRoute>} \r\n//         />\r\n//         */}\r\n\r\n//       </Routes>\r\n//     </Router>\r\n//   );\r\n// }\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC1C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAI,CAACF,KAAK,EAAE;IACR;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACS,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtC;EAEA,IAAI;IACA;IACA,MAAMC,YAAY,GAAGd,SAAS,CAACK,KAAK,CAAC;;IAErC;IACA,IAAIS,YAAY,CAACC,IAAI,KAAK,OAAO,EAAE;MAC/B;MACA;MACA,oBAAOb,OAAA,CAACH,QAAQ;QAACS,EAAE,EAAC,YAAY;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC/C;EACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZ;IACAC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,oBAAOd,OAAA,CAACH,QAAQ;MAACS,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtC;;EAEA;EACA,OAAOT,QAAQ;AACnB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAAc,EAAA,GAlGMf,mBAAmB;AAoGzB,eAAegB,GAAG;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}